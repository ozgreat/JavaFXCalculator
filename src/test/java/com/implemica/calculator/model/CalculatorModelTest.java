package com.implemica.calculator.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CalculatorModelTest {
  private CalculatorModel calc;

  @Test
  void plusTest() {
    calc.setOperation("+");

    //Integer
    checkReg("2.000000000000000E+16", "9999999999999999", "9999999999999999");
    checkReg("2.000000000000000E+16", "9999999999999999", "9999999999999998");
    checkReg("1.500000000000000E+16", "9999999999999999", "5000000000000000");
    checkReg("1.500000000000000E+16", "9999999999999999", "5000000000000001");
    checkReg("1.500000000000000E+16", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "0");
    checkReg("1.000000000000000E+16", "9999999999999999", "1");
    checkReg("9999999999999998", "9999999999999999", "-1");
    checkReg("0", "9999999999999999", "-9999999999999999");
    checkReg("1", "9999999999999999", "-9999999999999998");
    checkReg("4999999999999999", "9999999999999999", "-5000000000000000");
    checkReg("4999999999999998", "9999999999999999", "-5000000000000001");
    checkReg("5000000000000000", "9999999999999999", "-4999999999999999");
    checkReg("2.000000000000000E+16", "9999999999999998", "9999999999999999");
    checkReg("2.000000000000000E+16", "9999999999999998", "9999999999999998");
    checkReg("1.500000000000000E+16", "9999999999999998", "5000000000000000");
    checkReg("1.500000000000000E+16", "9999999999999998", "5000000000000001");
    checkReg("1.500000000000000E+16", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "0");
    checkReg("9999999999999999", "9999999999999998", "1");
    checkReg("9999999999999997", "9999999999999998", "-1");
    checkReg("-1", "9999999999999998", "-9999999999999999");
    checkReg("0", "9999999999999998", "-9999999999999998");
    checkReg("4999999999999998", "9999999999999998", "-5000000000000000");
    checkReg("4999999999999997", "9999999999999998", "-5000000000000001");
    checkReg("4999999999999999", "9999999999999998", "-4999999999999999");
    checkReg("1.500000000000000E+16", "5000000000000000", "9999999999999999");
    checkReg("1.500000000000000E+16", "5000000000000000", "9999999999999998");
    checkReg("1.000000000000000E+16", "5000000000000000", "5000000000000000");
    checkReg("1.000000000000000E+16", "5000000000000000", "5000000000000001");
    checkReg("9999999999999999", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "0");
    checkReg("5000000000000001", "5000000000000000", "1");
    checkReg("4999999999999999", "5000000000000000", "-1");
    checkReg("-4999999999999999", "5000000000000000", "-9999999999999999");
    checkReg("-4999999999999998", "5000000000000000", "-9999999999999998");
    checkReg("0", "5000000000000000", "-5000000000000000");
    checkReg("-1", "5000000000000000", "-5000000000000001");
    checkReg("1", "5000000000000000", "-4999999999999999");
    checkReg("1.500000000000000E+16", "5000000000000001", "9999999999999999");
    checkReg("1.500000000000000E+16", "5000000000000001", "9999999999999998");
    checkReg("1.000000000000000E+16", "5000000000000001", "5000000000000000");
    checkReg("1.000000000000000E+16", "5000000000000001", "5000000000000001");
    checkReg("1.000000000000000E+16", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "0");
    checkReg("5000000000000002", "5000000000000001", "1");
    checkReg("5000000000000000", "5000000000000001", "-1");
    checkReg("-4999999999999998", "5000000000000001", "-9999999999999999");
    checkReg("-4999999999999997", "5000000000000001", "-9999999999999998");
    checkReg("1", "5000000000000001", "-5000000000000000");
    checkReg("0", "5000000000000001", "-5000000000000001");
    checkReg("2", "5000000000000001", "-4999999999999999");
    checkReg("1.500000000000000E+16", "4999999999999999", "9999999999999999");
    checkReg("1.500000000000000E+16", "4999999999999999", "9999999999999998");
    checkReg("9999999999999999", "4999999999999999", "5000000000000000");
    checkReg("1.000000000000000E+16", "4999999999999999", "5000000000000001");
    checkReg("9999999999999998", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "0");
    checkReg("5000000000000000", "4999999999999999", "1");
    checkReg("4999999999999998", "4999999999999999", "-1");
    checkReg("-5000000000000000", "4999999999999999", "-9999999999999999");
    checkReg("-4999999999999999", "4999999999999999", "-9999999999999998");
    checkReg("-1", "4999999999999999", "-5000000000000000");
    checkReg("-2", "4999999999999999", "-5000000000000001");
    checkReg("0", "4999999999999999", "-4999999999999999");
    checkReg("9999999999999999", "0", "9999999999999999");
    checkReg("9999999999999998", "0", "9999999999999998");
    checkReg("5000000000000000", "0", "5000000000000000");
    checkReg("5000000000000001", "0", "5000000000000001");
    checkReg("4999999999999999", "0", "4999999999999999");
    checkReg("0", "0", "0");
    checkReg("1", "0", "1");
    checkReg("-1", "0", "-1");
    checkReg("-9999999999999999", "0", "-9999999999999999");
    checkReg("-9999999999999998", "0", "-9999999999999998");
    checkReg("-5000000000000000", "0", "-5000000000000000");
    checkReg("-5000000000000001", "0", "-5000000000000001");
    checkReg("-4999999999999999", "0", "-4999999999999999");
    checkReg("1.000000000000000E+16", "1", "9999999999999999");
    checkReg("9999999999999999", "1", "9999999999999998");
    checkReg("5000000000000001", "1", "5000000000000000");
    checkReg("5000000000000002", "1", "5000000000000001");
    checkReg("5000000000000000", "1", "4999999999999999");
    checkReg("1", "1", "0");
    checkReg("2", "1", "1");
    checkReg("0", "1", "-1");
    checkReg("-9999999999999998", "1", "-9999999999999999");
    checkReg("-9999999999999997", "1", "-9999999999999998");
    checkReg("-4999999999999999", "1", "-5000000000000000");
    checkReg("-5000000000000000", "1", "-5000000000000001");
    checkReg("-4999999999999998", "1", "-4999999999999999");
    checkReg("9999999999999998", "-1", "9999999999999999");
    checkReg("9999999999999997", "-1", "9999999999999998");
    checkReg("4999999999999999", "-1", "5000000000000000");
    checkReg("5000000000000000", "-1", "5000000000000001");
    checkReg("4999999999999998", "-1", "4999999999999999");
    checkReg("-1", "-1", "0");
    checkReg("0", "-1", "1");
    checkReg("-2", "-1", "-1");
    checkReg("-1.000000000000000E+16", "-1", "-9999999999999999");
    checkReg("-9999999999999999", "-1", "-9999999999999998");
    checkReg("-5000000000000001", "-1", "-5000000000000000");
    checkReg("-5000000000000002", "-1", "-5000000000000001");
    checkReg("-5000000000000000", "-1", "-4999999999999999");
    checkReg("0", "-9999999999999999", "9999999999999999");
    checkReg("-1", "-9999999999999999", "9999999999999998");
    checkReg("-4999999999999999", "-9999999999999999", "5000000000000000");
    checkReg("-4999999999999998", "-9999999999999999", "5000000000000001");
    checkReg("-5000000000000000", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "0");
    checkReg("-9999999999999998", "-9999999999999999", "1");
    checkReg("-1.000000000000000E+16", "-9999999999999999", "-1");
    checkReg("-2.000000000000000E+16", "-9999999999999999", "-9999999999999999");
    checkReg("-2.000000000000000E+16", "-9999999999999999", "-9999999999999998");
    checkReg("-1.500000000000000E+16", "-9999999999999999", "-5000000000000000");
    checkReg("-1.500000000000000E+16", "-9999999999999999", "-5000000000000001");
    checkReg("-1.500000000000000E+16", "-9999999999999999", "-4999999999999999");
    checkReg("1", "-9999999999999998", "9999999999999999");
    checkReg("0", "-9999999999999998", "9999999999999998");
    checkReg("-4999999999999998", "-9999999999999998", "5000000000000000");
    checkReg("-4999999999999997", "-9999999999999998", "5000000000000001");
    checkReg("-4999999999999999", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "0");
    checkReg("-9999999999999997", "-9999999999999998", "1");
    checkReg("-9999999999999999", "-9999999999999998", "-1");
    checkReg("-2.000000000000000E+16", "-9999999999999998", "-9999999999999999");
    checkReg("-2.000000000000000E+16", "-9999999999999998", "-9999999999999998");
    checkReg("-1.500000000000000E+16", "-9999999999999998", "-5000000000000000");
    checkReg("-1.500000000000000E+16", "-9999999999999998", "-5000000000000001");
    checkReg("-1.500000000000000E+16", "-9999999999999998", "-4999999999999999");
    checkReg("4999999999999999", "-5000000000000000", "9999999999999999");
    checkReg("4999999999999998", "-5000000000000000", "9999999999999998");
    checkReg("0", "-5000000000000000", "5000000000000000");
    checkReg("1", "-5000000000000000", "5000000000000001");
    checkReg("-1", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "0");
    checkReg("-4999999999999999", "-5000000000000000", "1");
    checkReg("-5000000000000001", "-5000000000000000", "-1");
    checkReg("-1.500000000000000E+16", "-5000000000000000", "-9999999999999999");
    checkReg("-1.500000000000000E+16", "-5000000000000000", "-9999999999999998");
    checkReg("-1.000000000000000E+16", "-5000000000000000", "-5000000000000000");
    checkReg("-1.000000000000000E+16", "-5000000000000000", "-5000000000000001");
    checkReg("-9999999999999999", "-5000000000000000", "-4999999999999999");
    checkReg("4999999999999998", "-5000000000000001", "9999999999999999");
    checkReg("4999999999999997", "-5000000000000001", "9999999999999998");
    checkReg("-1", "-5000000000000001", "5000000000000000");
    checkReg("0", "-5000000000000001", "5000000000000001");
    checkReg("-2", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "0");
    checkReg("-5000000000000000", "-5000000000000001", "1");
    checkReg("-5000000000000002", "-5000000000000001", "-1");
    checkReg("-1.500000000000000E+16", "-5000000000000001", "-9999999999999999");
    checkReg("-1.500000000000000E+16", "-5000000000000001", "-9999999999999998");
    checkReg("-1.000000000000000E+16", "-5000000000000001", "-5000000000000000");
    checkReg("-1.000000000000000E+16", "-5000000000000001", "-5000000000000001");
    checkReg("-1.000000000000000E+16", "-5000000000000001", "-4999999999999999");
    checkReg("5000000000000000", "-4999999999999999", "9999999999999999");
    checkReg("4999999999999999", "-4999999999999999", "9999999999999998");
    checkReg("1", "-4999999999999999", "5000000000000000");
    checkReg("2", "-4999999999999999", "5000000000000001");
    checkReg("0", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "0");
    checkReg("-4999999999999998", "-4999999999999999", "1");
    checkReg("-5000000000000000", "-4999999999999999", "-1");
    checkReg("-1.500000000000000E+16", "-4999999999999999", "-9999999999999999");
    checkReg("-1.500000000000000E+16", "-4999999999999999", "-9999999999999998");
    checkReg("-9999999999999999", "-4999999999999999", "-5000000000000000");
    checkReg("-1.000000000000000E+16", "-4999999999999999", "-5000000000000001");
    checkReg("-9999999999999998", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void minusTest() {
    calc.setOperation("-");

    //Integer
    checkReg("0", "9999999999999999", "9999999999999999");
    checkReg("1", "9999999999999999", "9999999999999998");
    checkReg("4999999999999999", "9999999999999999", "5000000000000000");
    checkReg("4999999999999998", "9999999999999999", "5000000000000001");
    checkReg("5000000000000000", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "0");
    checkReg("9999999999999998", "9999999999999999", "1");
    checkReg("1.000000000000000E+16", "9999999999999999", "-1");
    checkReg("2.000000000000000E+16", "9999999999999999", "-9999999999999999");
    checkReg("2.000000000000000E+16", "9999999999999999", "-9999999999999998");
    checkReg("1.500000000000000E+16", "9999999999999999", "-5000000000000000");
    checkReg("1.500000000000000E+16", "9999999999999999", "-5000000000000001");
    checkReg("1.500000000000000E+16", "9999999999999999", "-4999999999999999");
    checkReg("-1", "9999999999999998", "9999999999999999");
    checkReg("0", "9999999999999998", "9999999999999998");
    checkReg("4999999999999998", "9999999999999998", "5000000000000000");
    checkReg("4999999999999997", "9999999999999998", "5000000000000001");
    checkReg("4999999999999999", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "0");
    checkReg("9999999999999997", "9999999999999998", "1");
    checkReg("9999999999999999", "9999999999999998", "-1");
    checkReg("2.000000000000000E+16", "9999999999999998", "-9999999999999999");
    checkReg("2.000000000000000E+16", "9999999999999998", "-9999999999999998");
    checkReg("1.500000000000000E+16", "9999999999999998", "-5000000000000000");
    checkReg("1.500000000000000E+16", "9999999999999998", "-5000000000000001");
    checkReg("1.500000000000000E+16", "9999999999999998", "-4999999999999999");
    checkReg("-4999999999999999", "5000000000000000", "9999999999999999");
    checkReg("-4999999999999998", "5000000000000000", "9999999999999998");
    checkReg("0", "5000000000000000", "5000000000000000");
    checkReg("-1", "5000000000000000", "5000000000000001");
    checkReg("1", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "0");
    checkReg("4999999999999999", "5000000000000000", "1");
    checkReg("5000000000000001", "5000000000000000", "-1");
    checkReg("1.500000000000000E+16", "5000000000000000", "-9999999999999999");
    checkReg("1.500000000000000E+16", "5000000000000000", "-9999999999999998");
    checkReg("1.000000000000000E+16", "5000000000000000", "-5000000000000000");
    checkReg("1.000000000000000E+16", "5000000000000000", "-5000000000000001");
    checkReg("9999999999999999", "5000000000000000", "-4999999999999999");
    checkReg("-4999999999999998", "5000000000000001", "9999999999999999");
    checkReg("-4999999999999997", "5000000000000001", "9999999999999998");
    checkReg("1", "5000000000000001", "5000000000000000");
    checkReg("0", "5000000000000001", "5000000000000001");
    checkReg("2", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "0");
    checkReg("5000000000000000", "5000000000000001", "1");
    checkReg("5000000000000002", "5000000000000001", "-1");
    checkReg("1.500000000000000E+16", "5000000000000001", "-9999999999999999");
    checkReg("1.500000000000000E+16", "5000000000000001", "-9999999999999998");
    checkReg("1.000000000000000E+16", "5000000000000001", "-5000000000000000");
    checkReg("1.000000000000000E+16", "5000000000000001", "-5000000000000001");
    checkReg("1.000000000000000E+16", "5000000000000001", "-4999999999999999");
    checkReg("-5000000000000000", "4999999999999999", "9999999999999999");
    checkReg("-4999999999999999", "4999999999999999", "9999999999999998");
    checkReg("-1", "4999999999999999", "5000000000000000");
    checkReg("-2", "4999999999999999", "5000000000000001");
    checkReg("0", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "0");
    checkReg("4999999999999998", "4999999999999999", "1");
    checkReg("5000000000000000", "4999999999999999", "-1");
    checkReg("1.500000000000000E+16", "4999999999999999", "-9999999999999999");
    checkReg("1.500000000000000E+16", "4999999999999999", "-9999999999999998");
    checkReg("9999999999999999", "4999999999999999", "-5000000000000000");
    checkReg("1.000000000000000E+16", "4999999999999999", "-5000000000000001");
    checkReg("9999999999999998", "4999999999999999", "-4999999999999999");
    checkReg("-9999999999999999", "0", "9999999999999999");
    checkReg("-9999999999999998", "0", "9999999999999998");
    checkReg("-5000000000000000", "0", "5000000000000000");
    checkReg("-5000000000000001", "0", "5000000000000001");
    checkReg("-4999999999999999", "0", "4999999999999999");
    checkReg("0", "0", "0");
    checkReg("-1", "0", "1");
    checkReg("1", "0", "-1");
    checkReg("9999999999999999", "0", "-9999999999999999");
    checkReg("9999999999999998", "0", "-9999999999999998");
    checkReg("5000000000000000", "0", "-5000000000000000");
    checkReg("5000000000000001", "0", "-5000000000000001");
    checkReg("4999999999999999", "0", "-4999999999999999");
    checkReg("-9999999999999998", "1", "9999999999999999");
    checkReg("-9999999999999997", "1", "9999999999999998");
    checkReg("-4999999999999999", "1", "5000000000000000");
    checkReg("-5000000000000000", "1", "5000000000000001");
    checkReg("-4999999999999998", "1", "4999999999999999");
    checkReg("1", "1", "0");
    checkReg("0", "1", "1");
    checkReg("2", "1", "-1");
    checkReg("1.000000000000000E+16", "1", "-9999999999999999");
    checkReg("9999999999999999", "1", "-9999999999999998");
    checkReg("5000000000000001", "1", "-5000000000000000");
    checkReg("5000000000000002", "1", "-5000000000000001");
    checkReg("5000000000000000", "1", "-4999999999999999");
    checkReg("-1.000000000000000E+16", "-1", "9999999999999999");
    checkReg("-9999999999999999", "-1", "9999999999999998");
    checkReg("-5000000000000001", "-1", "5000000000000000");
    checkReg("-5000000000000002", "-1", "5000000000000001");
    checkReg("-5000000000000000", "-1", "4999999999999999");
    checkReg("-1", "-1", "0");
    checkReg("-2", "-1", "1");
    checkReg("0", "-1", "-1");
    checkReg("9999999999999998", "-1", "-9999999999999999");
    checkReg("9999999999999997", "-1", "-9999999999999998");
    checkReg("4999999999999999", "-1", "-5000000000000000");
    checkReg("5000000000000000", "-1", "-5000000000000001");
    checkReg("4999999999999998", "-1", "-4999999999999999");
    checkReg("-2.000000000000000E+16", "-9999999999999999", "9999999999999999");
    checkReg("-2.000000000000000E+16", "-9999999999999999", "9999999999999998");
    checkReg("-1.500000000000000E+16", "-9999999999999999", "5000000000000000");
    checkReg("-1.500000000000000E+16", "-9999999999999999", "5000000000000001");
    checkReg("-1.500000000000000E+16", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "0");
    checkReg("-1.000000000000000E+16", "-9999999999999999", "1");
    checkReg("-9999999999999998", "-9999999999999999", "-1");
    checkReg("0", "-9999999999999999", "-9999999999999999");
    checkReg("-1", "-9999999999999999", "-9999999999999998");
    checkReg("-4999999999999999", "-9999999999999999", "-5000000000000000");
    checkReg("-4999999999999998", "-9999999999999999", "-5000000000000001");
    checkReg("-5000000000000000", "-9999999999999999", "-4999999999999999");
    checkReg("-2.000000000000000E+16", "-9999999999999998", "9999999999999999");
    checkReg("-2.000000000000000E+16", "-9999999999999998", "9999999999999998");
    checkReg("-1.500000000000000E+16", "-9999999999999998", "5000000000000000");
    checkReg("-1.500000000000000E+16", "-9999999999999998", "5000000000000001");
    checkReg("-1.500000000000000E+16", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "0");
    checkReg("-9999999999999999", "-9999999999999998", "1");
    checkReg("-9999999999999997", "-9999999999999998", "-1");
    checkReg("1", "-9999999999999998", "-9999999999999999");
    checkReg("0", "-9999999999999998", "-9999999999999998");
    checkReg("-4999999999999998", "-9999999999999998", "-5000000000000000");
    checkReg("-4999999999999997", "-9999999999999998", "-5000000000000001");
    checkReg("-4999999999999999", "-9999999999999998", "-4999999999999999");
    checkReg("-1.500000000000000E+16", "-5000000000000000", "9999999999999999");
    checkReg("-1.500000000000000E+16", "-5000000000000000", "9999999999999998");
    checkReg("-1.000000000000000E+16", "-5000000000000000", "5000000000000000");
    checkReg("-1.000000000000000E+16", "-5000000000000000", "5000000000000001");
    checkReg("-9999999999999999", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "0");
    checkReg("-5000000000000001", "-5000000000000000", "1");
    checkReg("-4999999999999999", "-5000000000000000", "-1");
    checkReg("4999999999999999", "-5000000000000000", "-9999999999999999");
    checkReg("4999999999999998", "-5000000000000000", "-9999999999999998");
    checkReg("0", "-5000000000000000", "-5000000000000000");
    checkReg("1", "-5000000000000000", "-5000000000000001");
    checkReg("-1", "-5000000000000000", "-4999999999999999");
    checkReg("-1.500000000000000E+16", "-5000000000000001", "9999999999999999");
    checkReg("-1.500000000000000E+16", "-5000000000000001", "9999999999999998");
    checkReg("-1.000000000000000E+16", "-5000000000000001", "5000000000000000");
    checkReg("-1.000000000000000E+16", "-5000000000000001", "5000000000000001");
    checkReg("-1.000000000000000E+16", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "0");
    checkReg("-5000000000000002", "-5000000000000001", "1");
    checkReg("-5000000000000000", "-5000000000000001", "-1");
    checkReg("4999999999999998", "-5000000000000001", "-9999999999999999");
    checkReg("4999999999999997", "-5000000000000001", "-9999999999999998");
    checkReg("-1", "-5000000000000001", "-5000000000000000");
    checkReg("0", "-5000000000000001", "-5000000000000001");
    checkReg("-2", "-5000000000000001", "-4999999999999999");
    checkReg("-1.500000000000000E+16", "-4999999999999999", "9999999999999999");
    checkReg("-1.500000000000000E+16", "-4999999999999999", "9999999999999998");
    checkReg("-9999999999999999", "-4999999999999999", "5000000000000000");
    checkReg("-1.000000000000000E+16", "-4999999999999999", "5000000000000001");
    checkReg("-9999999999999998", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "0");
    checkReg("-5000000000000000", "-4999999999999999", "1");
    checkReg("-4999999999999998", "-4999999999999999", "-1");
    checkReg("5000000000000000", "-4999999999999999", "-9999999999999999");
    checkReg("4999999999999999", "-4999999999999999", "-9999999999999998");
    checkReg("1", "-4999999999999999", "-5000000000000000");
    checkReg("2", "-4999999999999999", "-5000000000000001");
    checkReg("0", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void testMultiply() {
    calc.setOperation("×");

    //Integer
    checkReg("9.999999999999998E+31", "9999999999999999", "9999999999999999");
    checkReg("9.999999999999997E+31", "9999999999999999", "9999999999999998");
    checkReg("5.000000000000000E+31", "9999999999999999", "5000000000000000");
    checkReg("5.000000000000000E+31", "9999999999999999", "5000000000000001");
    checkReg("4.999999999999999E+31", "9999999999999999", "4999999999999999");
    checkReg("0", "9999999999999999", "0");
    checkReg("9999999999999999", "9999999999999999", "1");
    checkReg("-9999999999999999", "9999999999999999", "-1");
    checkReg("-9.999999999999998E+31", "9999999999999999", "-9999999999999999");
    checkReg("-9.999999999999997E+31", "9999999999999999", "-9999999999999998");
    checkReg("-5.000000000000000E+31", "9999999999999999", "-5000000000000000");
    checkReg("-5.000000000000000E+31", "9999999999999999", "-5000000000000001");
    checkReg("-4.999999999999999E+31", "9999999999999999", "-4999999999999999");
    checkReg("9.999999999999997E+31", "9999999999999998", "9999999999999999");
    checkReg("9.999999999999996E+31", "9999999999999998", "9999999999999998");
    checkReg("4.999999999999999E+31", "9999999999999998", "5000000000000000");
    checkReg("5.000000000000000E+31", "9999999999999998", "5000000000000001");
    checkReg("4.999999999999998E+31", "9999999999999998", "4999999999999999");
    checkReg("0", "9999999999999998", "0");
    checkReg("9999999999999998", "9999999999999998", "1");
    checkReg("-9999999999999998", "9999999999999998", "-1");
    checkReg("-9.999999999999997E+31", "9999999999999998", "-9999999999999999");
    checkReg("-9.999999999999996E+31", "9999999999999998", "-9999999999999998");
    checkReg("-4.999999999999999E+31", "9999999999999998", "-5000000000000000");
    checkReg("-5.000000000000000E+31", "9999999999999998", "-5000000000000001");
    checkReg("-4.999999999999998E+31", "9999999999999998", "-4999999999999999");
    checkReg("5.000000000000000E+31", "5000000000000000", "9999999999999999");
    checkReg("4.999999999999999E+31", "5000000000000000", "9999999999999998");
    checkReg("2.500000000000000E+31", "5000000000000000", "5000000000000000");
    checkReg("2.500000000000001E+31", "5000000000000000", "5000000000000001");
    checkReg("2.500000000000000E+31", "5000000000000000", "4999999999999999");
    checkReg("0", "5000000000000000", "0");
    checkReg("5000000000000000", "5000000000000000", "1");
    checkReg("-5000000000000000", "5000000000000000", "-1");
    checkReg("-5.000000000000000E+31", "5000000000000000", "-9999999999999999");
    checkReg("-4.999999999999999E+31", "5000000000000000", "-9999999999999998");
    checkReg("-2.500000000000000E+31", "5000000000000000", "-5000000000000000");
    checkReg("-2.500000000000001E+31", "5000000000000000", "-5000000000000001");
    checkReg("-2.500000000000000E+31", "5000000000000000", "-4999999999999999");
    checkReg("5.000000000000000E+31", "5000000000000001", "9999999999999999");
    checkReg("5.000000000000000E+31", "5000000000000001", "9999999999999998");
    checkReg("2.500000000000001E+31", "5000000000000001", "5000000000000000");
    checkReg("2.500000000000001E+31", "5000000000000001", "5000000000000001");
    checkReg("2.500000000000000E+31", "5000000000000001", "4999999999999999");
    checkReg("0", "5000000000000001", "0");
    checkReg("5000000000000001", "5000000000000001", "1");
    checkReg("-5000000000000001", "5000000000000001", "-1");
    checkReg("-5.000000000000000E+31", "5000000000000001", "-9999999999999999");
    checkReg("-5.000000000000000E+31", "5000000000000001", "-9999999999999998");
    checkReg("-2.500000000000001E+31", "5000000000000001", "-5000000000000000");
    checkReg("-2.500000000000001E+31", "5000000000000001", "-5000000000000001");
    checkReg("-2.500000000000000E+31", "5000000000000001", "-4999999999999999");
    checkReg("4.999999999999999E+31", "4999999999999999", "9999999999999999");
    checkReg("4.999999999999998E+31", "4999999999999999", "9999999999999998");
    checkReg("2.500000000000000E+31", "4999999999999999", "5000000000000000");
    checkReg("2.500000000000000E+31", "4999999999999999", "5000000000000001");
    checkReg("2.499999999999999E+31", "4999999999999999", "4999999999999999");
    checkReg("0", "4999999999999999", "0");
    checkReg("4999999999999999", "4999999999999999", "1");
    checkReg("-4999999999999999", "4999999999999999", "-1");
    checkReg("-4.999999999999999E+31", "4999999999999999", "-9999999999999999");
    checkReg("-4.999999999999998E+31", "4999999999999999", "-9999999999999998");
    checkReg("-2.500000000000000E+31", "4999999999999999", "-5000000000000000");
    checkReg("-2.500000000000000E+31", "4999999999999999", "-5000000000000001");
    checkReg("-2.499999999999999E+31", "4999999999999999", "-4999999999999999");
    checkReg("0", "0", "9999999999999999");
    checkReg("0", "0", "9999999999999998");
    checkReg("0", "0", "5000000000000000");
    checkReg("0", "0", "5000000000000001");
    checkReg("0", "0", "4999999999999999");
    checkReg("0", "0", "0");
    checkReg("0", "0", "1");
    checkReg("0", "0", "-1");
    checkReg("0", "0", "-9999999999999999");
    checkReg("0", "0", "-9999999999999998");
    checkReg("0", "0", "-5000000000000000");
    checkReg("0", "0", "-5000000000000001");
    checkReg("0", "0", "-4999999999999999");
    checkReg("9999999999999999", "1", "9999999999999999");
    checkReg("9999999999999998", "1", "9999999999999998");
    checkReg("5000000000000000", "1", "5000000000000000");
    checkReg("5000000000000001", "1", "5000000000000001");
    checkReg("4999999999999999", "1", "4999999999999999");
    checkReg("0", "1", "0");
    checkReg("1", "1", "1");
    checkReg("-1", "1", "-1");
    checkReg("-9999999999999999", "1", "-9999999999999999");
    checkReg("-9999999999999998", "1", "-9999999999999998");
    checkReg("-5000000000000000", "1", "-5000000000000000");
    checkReg("-5000000000000001", "1", "-5000000000000001");
    checkReg("-4999999999999999", "1", "-4999999999999999");
    checkReg("-9999999999999999", "-1", "9999999999999999");
    checkReg("-9999999999999998", "-1", "9999999999999998");
    checkReg("-5000000000000000", "-1", "5000000000000000");
    checkReg("-5000000000000001", "-1", "5000000000000001");
    checkReg("-4999999999999999", "-1", "4999999999999999");
    checkReg("0", "-1", "0");
    checkReg("-1", "-1", "1");
    checkReg("1", "-1", "-1");
    checkReg("9999999999999999", "-1", "-9999999999999999");
    checkReg("9999999999999998", "-1", "-9999999999999998");
    checkReg("5000000000000000", "-1", "-5000000000000000");
    checkReg("5000000000000001", "-1", "-5000000000000001");
    checkReg("4999999999999999", "-1", "-4999999999999999");
    checkReg("-9.999999999999998E+31", "-9999999999999999", "9999999999999999");
    checkReg("-9.999999999999997E+31", "-9999999999999999", "9999999999999998");
    checkReg("-5.000000000000000E+31", "-9999999999999999", "5000000000000000");
    checkReg("-5.000000000000000E+31", "-9999999999999999", "5000000000000001");
    checkReg("-4.999999999999999E+31", "-9999999999999999", "4999999999999999");
    checkReg("0", "-9999999999999999", "0");
    checkReg("-9999999999999999", "-9999999999999999", "1");
    checkReg("9999999999999999", "-9999999999999999", "-1");
    checkReg("9.999999999999998E+31", "-9999999999999999", "-9999999999999999");
    checkReg("9.999999999999997E+31", "-9999999999999999", "-9999999999999998");
    checkReg("5.000000000000000E+31", "-9999999999999999", "-5000000000000000");
    checkReg("5.000000000000000E+31", "-9999999999999999", "-5000000000000001");
    checkReg("4.999999999999999E+31", "-9999999999999999", "-4999999999999999");
    checkReg("-9.999999999999997E+31", "-9999999999999998", "9999999999999999");
    checkReg("-9.999999999999996E+31", "-9999999999999998", "9999999999999998");
    checkReg("-4.999999999999999E+31", "-9999999999999998", "5000000000000000");
    checkReg("-5.000000000000000E+31", "-9999999999999998", "5000000000000001");
    checkReg("-4.999999999999998E+31", "-9999999999999998", "4999999999999999");
    checkReg("0", "-9999999999999998", "0");
    checkReg("-9999999999999998", "-9999999999999998", "1");
    checkReg("9999999999999998", "-9999999999999998", "-1");
    checkReg("9.999999999999997E+31", "-9999999999999998", "-9999999999999999");
    checkReg("9.999999999999996E+31", "-9999999999999998", "-9999999999999998");
    checkReg("4.999999999999999E+31", "-9999999999999998", "-5000000000000000");
    checkReg("5.000000000000000E+31", "-9999999999999998", "-5000000000000001");
    checkReg("4.999999999999998E+31", "-9999999999999998", "-4999999999999999");
    checkReg("-5.000000000000000E+31", "-5000000000000000", "9999999999999999");
    checkReg("-4.999999999999999E+31", "-5000000000000000", "9999999999999998");
    checkReg("-2.500000000000000E+31", "-5000000000000000", "5000000000000000");
    checkReg("-2.500000000000001E+31", "-5000000000000000", "5000000000000001");
    checkReg("-2.500000000000000E+31", "-5000000000000000", "4999999999999999");
    checkReg("0", "-5000000000000000", "0");
    checkReg("-5000000000000000", "-5000000000000000", "1");
    checkReg("5000000000000000", "-5000000000000000", "-1");
    checkReg("5.000000000000000E+31", "-5000000000000000", "-9999999999999999");
    checkReg("4.999999999999999E+31", "-5000000000000000", "-9999999999999998");
    checkReg("2.500000000000000E+31", "-5000000000000000", "-5000000000000000");
    checkReg("2.500000000000001E+31", "-5000000000000000", "-5000000000000001");
    checkReg("2.500000000000000E+31", "-5000000000000000", "-4999999999999999");
    checkReg("-5.000000000000000E+31", "-5000000000000001", "9999999999999999");
    checkReg("-5.000000000000000E+31", "-5000000000000001", "9999999999999998");
    checkReg("-2.500000000000001E+31", "-5000000000000001", "5000000000000000");
    checkReg("-2.500000000000001E+31", "-5000000000000001", "5000000000000001");
    checkReg("-2.500000000000000E+31", "-5000000000000001", "4999999999999999");
    checkReg("0", "-5000000000000001", "0");
    checkReg("-5000000000000001", "-5000000000000001", "1");
    checkReg("5000000000000001", "-5000000000000001", "-1");
    checkReg("5.000000000000000E+31", "-5000000000000001", "-9999999999999999");
    checkReg("5.000000000000000E+31", "-5000000000000001", "-9999999999999998");
    checkReg("2.500000000000001E+31", "-5000000000000001", "-5000000000000000");
    checkReg("2.500000000000001E+31", "-5000000000000001", "-5000000000000001");
    checkReg("2.500000000000000E+31", "-5000000000000001", "-4999999999999999");
    checkReg("-4.999999999999999E+31", "-4999999999999999", "9999999999999999");
    checkReg("-4.999999999999998E+31", "-4999999999999999", "9999999999999998");
    checkReg("-2.500000000000000E+31", "-4999999999999999", "5000000000000000");
    checkReg("-2.500000000000000E+31", "-4999999999999999", "5000000000000001");
    checkReg("-2.499999999999999E+31", "-4999999999999999", "4999999999999999");
    checkReg("0", "-4999999999999999", "0");
    checkReg("-4999999999999999", "-4999999999999999", "1");
    checkReg("4999999999999999", "-4999999999999999", "-1");
    checkReg("4.999999999999999E+31", "-4999999999999999", "-9999999999999999");
    checkReg("4.999999999999998E+31", "-4999999999999999", "-9999999999999998");
    checkReg("2.500000000000000E+31", "-4999999999999999", "-5000000000000000");
    checkReg("2.500000000000000E+31", "-4999999999999999", "-5000000000000001");
    checkReg("2.499999999999999E+31", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void testDivide() {
    calc.setOperation("÷");

    //Integer
    checkReg("1", "9999999999999999", "9999999999999999");
    checkReg("1", "9999999999999999", "9999999999999998");
    checkReg("2", "9999999999999999", "5000000000000000");
    checkReg("1.999999999999999", "9999999999999999", "5000000000000001");
    checkReg("2", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "1");
    checkReg("-9999999999999999", "9999999999999999", "-1");
    checkReg("-1", "9999999999999999", "-9999999999999999");
    checkReg("-1", "9999999999999999", "-9999999999999998");
    checkReg("-2", "9999999999999999", "-5000000000000000");
    checkReg("-1.999999999999999", "9999999999999999", "-5000000000000001");
    checkReg("-2", "9999999999999999", "-4999999999999999");
    checkReg("0.9999999999999999", "9999999999999998", "9999999999999999");
    checkReg("1", "9999999999999998", "9999999999999998");
    checkReg("2", "9999999999999998", "5000000000000000");
    checkReg("1.999999999999999", "9999999999999998", "5000000000000001");
    checkReg("2", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "1");
    checkReg("-9999999999999998", "9999999999999998", "-1");
    checkReg("-0.9999999999999999", "9999999999999998", "-9999999999999999");
    checkReg("-1", "9999999999999998", "-9999999999999998");
    checkReg("-2", "9999999999999998", "-5000000000000000");
    checkReg("-1.999999999999999", "9999999999999998", "-5000000000000001");
    checkReg("-2", "9999999999999998", "-4999999999999999");
    checkReg("0.5000000000000001", "5000000000000000", "9999999999999999");
    checkReg("0.5000000000000001", "5000000000000000", "9999999999999998");
    checkReg("1", "5000000000000000", "5000000000000000");
    checkReg("0.9999999999999998", "5000000000000000", "5000000000000001");
    checkReg("1", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "1");
    checkReg("-5000000000000000", "5000000000000000", "-1");
    checkReg("-0.5000000000000001", "5000000000000000", "-9999999999999999");
    checkReg("-0.5000000000000001", "5000000000000000", "-9999999999999998");
    checkReg("-1", "5000000000000000", "-5000000000000000");
    checkReg("-0.9999999999999998", "5000000000000000", "-5000000000000001");
    checkReg("-1", "5000000000000000", "-4999999999999999");
    checkReg("0.5000000000000002", "5000000000000001", "9999999999999999");
    checkReg("0.5000000000000002", "5000000000000001", "9999999999999998");
    checkReg("1", "5000000000000001", "5000000000000000");
    checkReg("1", "5000000000000001", "5000000000000001");
    checkReg("1", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "1");
    checkReg("-5000000000000001", "5000000000000001", "-1");
    checkReg("-0.5000000000000002", "5000000000000001", "-9999999999999999");
    checkReg("-0.5000000000000002", "5000000000000001", "-9999999999999998");
    checkReg("-1", "5000000000000001", "-5000000000000000");
    checkReg("-1", "5000000000000001", "-5000000000000001");
    checkReg("-1", "5000000000000001", "-4999999999999999");
    checkReg("0.4999999999999999", "4999999999999999", "9999999999999999");
    checkReg("0.5", "4999999999999999", "9999999999999998");
    checkReg("0.9999999999999998", "4999999999999999", "5000000000000000");
    checkReg("0.9999999999999996", "4999999999999999", "5000000000000001");
    checkReg("1", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "1");
    checkReg("-4999999999999999", "4999999999999999", "-1");
    checkReg("-0.4999999999999999", "4999999999999999", "-9999999999999999");
    checkReg("-0.5", "4999999999999999", "-9999999999999998");
    checkReg("-0.9999999999999998", "4999999999999999", "-5000000000000000");
    checkReg("-0.9999999999999996", "4999999999999999", "-5000000000000001");
    checkReg("-1", "4999999999999999", "-4999999999999999");
    checkReg("0", "0", "9999999999999999");
    checkReg("0", "0", "9999999999999998");
    checkReg("0", "0", "5000000000000000");
    checkReg("0", "0", "5000000000000001");
    checkReg("0", "0", "4999999999999999");
    checkReg("0", "0", "1");
    checkReg("0", "0", "-1");
    checkReg("0", "0", "-9999999999999999");
    checkReg("0", "0", "-9999999999999998");
    checkReg("0", "0", "-5000000000000000");
    checkReg("0", "0", "-5000000000000001");
    checkReg("0", "0", "-4999999999999999");
    checkReg("1.000000000000000E-16", "1", "9999999999999999");
    checkReg("1.000000000000000E-16", "1", "9999999999999998");
    checkReg("2E-16", "1", "5000000000000000");
    checkReg("2.000000000000000E-16", "1", "5000000000000001");
    checkReg("2.000000000000000E-16", "1", "4999999999999999");
    checkReg("1", "1", "1");
    checkReg("-1", "1", "-1");
    checkReg("-1.000000000000000E-16", "1", "-9999999999999999");
    checkReg("-1.000000000000000E-16", "1", "-9999999999999998");
    checkReg("-2E-16", "1", "-5000000000000000");
    checkReg("-2.000000000000000E-16", "1", "-5000000000000001");
    checkReg("-2.000000000000000E-16", "1", "-4999999999999999");
    checkReg("-1.000000000000000E-16", "-1", "9999999999999999");
    checkReg("-1.000000000000000E-16", "-1", "9999999999999998");
    checkReg("-2E-16", "-1", "5000000000000000");
    checkReg("-2.000000000000000E-16", "-1", "5000000000000001");
    checkReg("-2.000000000000000E-16", "-1", "4999999999999999");
    checkReg("-1", "-1", "1");
    checkReg("1", "-1", "-1");
    checkReg("1.000000000000000E-16", "-1", "-9999999999999999");
    checkReg("1.000000000000000E-16", "-1", "-9999999999999998");
    checkReg("2E-16", "-1", "-5000000000000000");
    checkReg("2.000000000000000E-16", "-1", "-5000000000000001");
    checkReg("2.000000000000000E-16", "-1", "-4999999999999999");
    checkReg("-1", "-9999999999999999", "9999999999999999");
    checkReg("-1", "-9999999999999999", "9999999999999998");
    checkReg("-2", "-9999999999999999", "5000000000000000");
    checkReg("-1.999999999999999", "-9999999999999999", "5000000000000001");
    checkReg("-2", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "1");
    checkReg("9999999999999999", "-9999999999999999", "-1");
    checkReg("1", "-9999999999999999", "-9999999999999999");
    checkReg("1", "-9999999999999999", "-9999999999999998");
    checkReg("2", "-9999999999999999", "-5000000000000000");
    checkReg("1.999999999999999", "-9999999999999999", "-5000000000000001");
    checkReg("2", "-9999999999999999", "-4999999999999999");
    checkReg("-0.9999999999999999", "-9999999999999998", "9999999999999999");
    checkReg("-1", "-9999999999999998", "9999999999999998");
    checkReg("-2", "-9999999999999998", "5000000000000000");
    checkReg("-1.999999999999999", "-9999999999999998", "5000000000000001");
    checkReg("-2", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "1");
    checkReg("9999999999999998", "-9999999999999998", "-1");
    checkReg("0.9999999999999999", "-9999999999999998", "-9999999999999999");
    checkReg("1", "-9999999999999998", "-9999999999999998");
    checkReg("2", "-9999999999999998", "-5000000000000000");
    checkReg("1.999999999999999", "-9999999999999998", "-5000000000000001");
    checkReg("2", "-9999999999999998", "-4999999999999999");
    checkReg("-0.5000000000000001", "-5000000000000000", "9999999999999999");
    checkReg("-0.5000000000000001", "-5000000000000000", "9999999999999998");
    checkReg("-1", "-5000000000000000", "5000000000000000");
    checkReg("-0.9999999999999998", "-5000000000000000", "5000000000000001");
    checkReg("-1", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "1");
    checkReg("5000000000000000", "-5000000000000000", "-1");
    checkReg("0.5000000000000001", "-5000000000000000", "-9999999999999999");
    checkReg("0.5000000000000001", "-5000000000000000", "-9999999999999998");
    checkReg("1", "-5000000000000000", "-5000000000000000");
    checkReg("0.9999999999999998", "-5000000000000000", "-5000000000000001");
    checkReg("1", "-5000000000000000", "-4999999999999999");
    checkReg("-0.5000000000000002", "-5000000000000001", "9999999999999999");
    checkReg("-0.5000000000000002", "-5000000000000001", "9999999999999998");
    checkReg("-1", "-5000000000000001", "5000000000000000");
    checkReg("-1", "-5000000000000001", "5000000000000001");
    checkReg("-1", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "1");
    checkReg("5000000000000001", "-5000000000000001", "-1");
    checkReg("0.5000000000000002", "-5000000000000001", "-9999999999999999");
    checkReg("0.5000000000000002", "-5000000000000001", "-9999999999999998");
    checkReg("1", "-5000000000000001", "-5000000000000000");
    checkReg("1", "-5000000000000001", "-5000000000000001");
    checkReg("1", "-5000000000000001", "-4999999999999999");
    checkReg("-0.4999999999999999", "-4999999999999999", "9999999999999999");
    checkReg("-0.5", "-4999999999999999", "9999999999999998");
    checkReg("-0.9999999999999998", "-4999999999999999", "5000000000000000");
    checkReg("-0.9999999999999996", "-4999999999999999", "5000000000000001");
    checkReg("-1", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "1");
    checkReg("4999999999999999", "-4999999999999999", "-1");
    checkReg("0.4999999999999999", "-4999999999999999", "-9999999999999999");
    checkReg("0.5", "-4999999999999999", "-9999999999999998");
    checkReg("0.9999999999999998", "-4999999999999999", "-5000000000000000");
    checkReg("0.9999999999999996", "-4999999999999999", "-5000000000000001");
    checkReg("1", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void reverseTest() {
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999999", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("1.000000000000000E-16", "9999999999999998", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2E-16", "5000000000000000", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "5000000000000001", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("2.000000000000000E-16", "4999999999999999", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("1", "1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1", "-1", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999999", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-1.000000000000000E-16", "-9999999999999998", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2E-16", "-5000000000000000", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-5000000000000001", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");
    checkUnary("-2.000000000000000E-16", "-4999999999999999", "1/x");

    //todo: Float val
  }

  @Test
  void checkPow(){
    //Integer
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999998E+31","9999999999999999","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("9.999999999999996E+31","9999999999999998","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000000E+31","5000000000000000","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.500000000000001E+31","5000000000000001","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("2.499999999999999E+31","4999999999999999","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("0","0","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("1","-1","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999998E+31","-9999999999999999","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("9.999999999999996E+31","-9999999999999998","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000000E+31","-5000000000000000","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.500000000000001E+31","-5000000000000001","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");
    checkUnary("2.499999999999999E+31","-4999999999999999","pow");

    //todo: Float
  }

  @Test
  void negateTest(){
    //Integer
    checkUnary("-9999999999999999","9999999999999999","±");
    checkUnary("-9999999999999998","9999999999999998","±");
    checkUnary("-5000000000000000","5000000000000000","±");
    checkUnary("-5000000000000001","5000000000000001","±");
    checkUnary("-4999999999999999","4999999999999999","±");
    checkUnary("0","0","±");
    checkUnary("-1","1","±");
    checkUnary("1","-1","±");
    checkUnary("1","-1","±");
    checkUnary("9999999999999999","-9999999999999999","±");
    checkUnary("9999999999999998","-9999999999999998","±");
    checkUnary("5000000000000000","-5000000000000000","±");
    checkUnary("5000000000000001","-5000000000000001","±");
    checkUnary("4999999999999999","-4999999999999999","±");

    //todo: Float
  }

  @Test
  void sqrtTest(){
    //Integer
    checkUnary("99999999.99999999","9999999999999999","√");
    checkUnary("99999999.99999999","9999999999999998","√");
    checkUnary("70710678.11865475","5000000000000000","√");
    checkUnary("70710678.11865476","5000000000000001","√");
    checkUnary("70710678.11865475","4999999999999999","√");
    checkUnary("0","0","√");
    checkUnary("1","1","√");

    //todo: Float
  }

  @BeforeEach
  void before() {
    calc = new CalculatorModel();
  }

  private void checkReg(String expected, String left, String right) {
    calc.setLeftOperand(new BigDecimal(left));
    calc.setRightOperand(new BigDecimal(right));
    String actual = calc.getBinaryOperationResult();
    assertEquals(expected, actual);
  }

  private void checkUnary(String expected, String num, String op) {
    String actual = calc.getUnaryOperationResult(op, num);
    assertEquals(expected, actual);
  }
}
