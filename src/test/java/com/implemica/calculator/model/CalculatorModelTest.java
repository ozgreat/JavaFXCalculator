package com.implemica.calculator.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CalculatorModelTest {
  private static final String REVERSE = "⅟\uD835\uDC65";
  private static final String POW = "\uD835\uDC65²";
  private static final String NEGATE = "±";
  private static final String SQRT = "√";

  private CalculatorModel calc;

  @Test
  void plusTest() {
    calc.setOperation("+");

    //Integer
    checkReg("2E+16", "9999999999999999", "9999999999999999");
    checkReg("2E+16", "9999999999999999", "9999999999999998");
    checkReg("1.05E+16", "9999999999999999", "500000000000000");
    checkReg("1.5E+16", "9999999999999999", "5000000000000001");
    checkReg("1.5E+16", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "0");
    checkReg("1E+16", "9999999999999999", "1");
    checkReg("9999999999999998", "9999999999999999", "-1");
    checkReg("0", "9999999999999999", "-9999999999999999");
    checkReg("1", "9999999999999999", "-9999999999999998");
    checkReg("4999999999999999", "9999999999999999", "-5000000000000000");
    checkReg("4999999999999998", "9999999999999999", "-5000000000000001");
    checkReg("5000000000000000", "9999999999999999", "-4999999999999999");
    checkReg("2E+16", "9999999999999998", "9999999999999999");
    checkReg("2E+16", "9999999999999998", "9999999999999998");
    checkReg("1.5E+16", "9999999999999998", "5000000000000000");
    checkReg("1.5E+16", "9999999999999998", "5000000000000001");
    checkReg("1.5E+16", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "0");
    checkReg("9999999999999999", "9999999999999998", "1");
    checkReg("9999999999999997", "9999999999999998", "-1");
    checkReg("-1", "9999999999999998", "-9999999999999999");
    checkReg("0", "9999999999999998", "-9999999999999998");
    checkReg("4999999999999998", "9999999999999998", "-5000000000000000");
    checkReg("4999999999999997", "9999999999999998", "-5000000000000001");
    checkReg("4999999999999999", "9999999999999998", "-4999999999999999");
    checkReg("1.5E+16", "5000000000000000", "9999999999999999");
    checkReg("1.5E+16", "5000000000000000", "9999999999999998");
    checkReg("1E+16", "5000000000000000", "5000000000000000");
    checkReg("1E+16", "5000000000000000", "5000000000000001");
    checkReg("9999999999999999", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "0");
    checkReg("5000000000000001", "5000000000000000", "1");
    checkReg("4999999999999999", "5000000000000000", "-1");
    checkReg("-4999999999999999", "5000000000000000", "-9999999999999999");
    checkReg("-4999999999999998", "5000000000000000", "-9999999999999998");
    checkReg("0", "5000000000000000", "-5000000000000000");
    checkReg("-1", "5000000000000000", "-5000000000000001");
    checkReg("1", "5000000000000000", "-4999999999999999");
    checkReg("1.5E+16", "5000000000000001", "9999999999999999");
    checkReg("1.5E+16", "5000000000000001", "9999999999999998");
    checkReg("1E+16", "5000000000000001", "5000000000000000");
    checkReg("1E+16", "5000000000000001", "5000000000000001");
    checkReg("1E+16", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "0");
    checkReg("5000000000000002", "5000000000000001", "1");
    checkReg("5000000000000000", "5000000000000001", "-1");
    checkReg("-4999999999999998", "5000000000000001", "-9999999999999999");
    checkReg("-4999999999999997", "5000000000000001", "-9999999999999998");
    checkReg("1", "5000000000000001", "-5000000000000000");
    checkReg("0", "5000000000000001", "-5000000000000001");
    checkReg("2", "5000000000000001", "-4999999999999999");
    checkReg("1.5E+16", "4999999999999999", "9999999999999999");
    checkReg("1.5E+16", "4999999999999999", "9999999999999998");
    checkReg("9999999999999999", "4999999999999999", "5000000000000000");
    checkReg("1E+16", "4999999999999999", "5000000000000001");
    checkReg("9999999999999998", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "0");
    checkReg("5000000000000000", "4999999999999999", "1");
    checkReg("4999999999999998", "4999999999999999", "-1");
    checkReg("-5000000000000000", "4999999999999999", "-9999999999999999");
    checkReg("-4999999999999999", "4999999999999999", "-9999999999999998");
    checkReg("-1", "4999999999999999", "-5000000000000000");
    checkReg("-2", "4999999999999999", "-5000000000000001");
    checkReg("0", "4999999999999999", "-4999999999999999");
    checkReg("9999999999999999", "0", "9999999999999999");
    checkReg("9999999999999998", "0", "9999999999999998");
    checkReg("5000000000000000", "0", "5000000000000000");
    checkReg("5000000000000001", "0", "5000000000000001");
    checkReg("4999999999999999", "0", "4999999999999999");
    checkReg("0", "0", "0");
    checkReg("1", "0", "1");
    checkReg("-1", "0", "-1");
    checkReg("-9999999999999999", "0", "-9999999999999999");
    checkReg("-9999999999999998", "0", "-9999999999999998");
    checkReg("-5000000000000000", "0", "-5000000000000000");
    checkReg("-5000000000000001", "0", "-5000000000000001");
    checkReg("-4999999999999999", "0", "-4999999999999999");
    checkReg("1E+16", "1", "9999999999999999");
    checkReg("9999999999999999", "1", "9999999999999998");
    checkReg("5000000000000001", "1", "5000000000000000");
    checkReg("5000000000000002", "1", "5000000000000001");
    checkReg("5000000000000000", "1", "4999999999999999");
    checkReg("1", "1", "0");
    checkReg("2", "1", "1");
    checkReg("0", "1", "-1");
    checkReg("-9999999999999998", "1", "-9999999999999999");
    checkReg("-9999999999999997", "1", "-9999999999999998");
    checkReg("-4999999999999999", "1", "-5000000000000000");
    checkReg("-5000000000000000", "1", "-5000000000000001");
    checkReg("-4999999999999998", "1", "-4999999999999999");
    checkReg("9999999999999998", "-1", "9999999999999999");
    checkReg("9999999999999997", "-1", "9999999999999998");
    checkReg("4999999999999999", "-1", "5000000000000000");
    checkReg("5000000000000000", "-1", "5000000000000001");
    checkReg("4999999999999998", "-1", "4999999999999999");
    checkReg("-1", "-1", "0");
    checkReg("0", "-1", "1");
    checkReg("-2", "-1", "-1");
    checkReg("-1E+16", "-1", "-9999999999999999");
    checkReg("-9999999999999999", "-1", "-9999999999999998");
    checkReg("-5000000000000001", "-1", "-5000000000000000");
    checkReg("-5000000000000002", "-1", "-5000000000000001");
    checkReg("-5000000000000000", "-1", "-4999999999999999");
    checkReg("0", "-9999999999999999", "9999999999999999");
    checkReg("-1", "-9999999999999999", "9999999999999998");
    checkReg("-4999999999999999", "-9999999999999999", "5000000000000000");
    checkReg("-4999999999999998", "-9999999999999999", "5000000000000001");
    checkReg("-5000000000000000", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "0");
    checkReg("-9999999999999998", "-9999999999999999", "1");
    checkReg("-1E+16", "-9999999999999999", "-1");
    checkReg("-2E+16", "-9999999999999999", "-9999999999999999");
    checkReg("-2E+16", "-9999999999999999", "-9999999999999998");
    checkReg("-1.5E+16", "-9999999999999999", "-5000000000000000");
    checkReg("-1.5E+16", "-9999999999999999", "-5000000000000001");
    checkReg("-1.5E+16", "-9999999999999999", "-4999999999999999");
    checkReg("1", "-9999999999999998", "9999999999999999");
    checkReg("0", "-9999999999999998", "9999999999999998");
    checkReg("-4999999999999998", "-9999999999999998", "5000000000000000");
    checkReg("-4999999999999997", "-9999999999999998", "5000000000000001");
    checkReg("-4999999999999999", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "0");
    checkReg("-9999999999999997", "-9999999999999998", "1");
    checkReg("-9999999999999999", "-9999999999999998", "-1");
    checkReg("-2E+16", "-9999999999999998", "-9999999999999999");
    checkReg("-2E+16", "-9999999999999998", "-9999999999999998");
    checkReg("-1.5E+16", "-9999999999999998", "-5000000000000000");
    checkReg("-1.5E+16", "-9999999999999998", "-5000000000000001");
    checkReg("-1.5E+16", "-9999999999999998", "-4999999999999999");
    checkReg("4999999999999999", "-5000000000000000", "9999999999999999");
    checkReg("4999999999999998", "-5000000000000000", "9999999999999998");
    checkReg("0", "-5000000000000000", "5000000000000000");
    checkReg("1", "-5000000000000000", "5000000000000001");
    checkReg("-1", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "0");
    checkReg("-4999999999999999", "-5000000000000000", "1");
    checkReg("-5000000000000001", "-5000000000000000", "-1");
    checkReg("-1.5E+16", "-5000000000000000", "-9999999999999999");
    checkReg("-1.5E+16", "-5000000000000000", "-9999999999999998");
    checkReg("-1E+16", "-5000000000000000", "-5000000000000000");
    checkReg("-1E+16", "-5000000000000000", "-5000000000000001");
    checkReg("-9999999999999999", "-5000000000000000", "-4999999999999999");
    checkReg("4999999999999998", "-5000000000000001", "9999999999999999");
    checkReg("4999999999999997", "-5000000000000001", "9999999999999998");
    checkReg("-1", "-5000000000000001", "5000000000000000");
    checkReg("0", "-5000000000000001", "5000000000000001");
    checkReg("-2", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "0");
    checkReg("-5000000000000000", "-5000000000000001", "1");
    checkReg("-5000000000000002", "-5000000000000001", "-1");
    checkReg("-1.5E+16", "-5000000000000001", "-9999999999999999");
    checkReg("-1.5E+16", "-5000000000000001", "-9999999999999998");
    checkReg("-1E+16", "-5000000000000001", "-5000000000000000");
    checkReg("-1E+16", "-5000000000000001", "-5000000000000001");
    checkReg("-1E+16", "-5000000000000001", "-4999999999999999");
    checkReg("5000000000000000", "-4999999999999999", "9999999999999999");
    checkReg("4999999999999999", "-4999999999999999", "9999999999999998");
    checkReg("1", "-4999999999999999", "5000000000000000");
    checkReg("2", "-4999999999999999", "5000000000000001");
    checkReg("0", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "0");
    checkReg("-4999999999999998", "-4999999999999999", "1");
    checkReg("-5000000000000000", "-4999999999999999", "-1");
    checkReg("-1.5E+16", "-4999999999999999", "-9999999999999999");
    checkReg("-1.5E+16", "-4999999999999999", "-9999999999999998");
    checkReg("-9999999999999999", "-4999999999999999", "-5000000000000000");
    checkReg("-1E+16", "-4999999999999999", "-5000000000000001");
    checkReg("-9999999999999998", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void minusTest() {
    calc.setOperation("-");

    //Integer
    checkReg("0", "9999999999999999", "9999999999999999");
    checkReg("1", "9999999999999999", "9999999999999998");
    checkReg("4999999999999999", "9999999999999999", "5000000000000000");
    checkReg("4999999999999998", "9999999999999999", "5000000000000001");
    checkReg("5000000000000000", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "0");
    checkReg("9999999999999998", "9999999999999999", "1");
    checkReg("1E+16", "9999999999999999", "-1");
    checkReg("2E+16", "9999999999999999", "-9999999999999999");
    checkReg("2E+16", "9999999999999999", "-9999999999999998");
    checkReg("1.5E+16", "9999999999999999", "-5000000000000000");
    checkReg("1.5E+16", "9999999999999999", "-5000000000000001");
    checkReg("1.5E+16", "9999999999999999", "-4999999999999999");
    checkReg("-1", "9999999999999998", "9999999999999999");
    checkReg("0", "9999999999999998", "9999999999999998");
    checkReg("4999999999999998", "9999999999999998", "5000000000000000");
    checkReg("4999999999999997", "9999999999999998", "5000000000000001");
    checkReg("4999999999999999", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "0");
    checkReg("9999999999999997", "9999999999999998", "1");
    checkReg("9999999999999999", "9999999999999998", "-1");
    checkReg("2E+16", "9999999999999998", "-9999999999999999");
    checkReg("2E+16", "9999999999999998", "-9999999999999998");
    checkReg("1.5E+16", "9999999999999998", "-5000000000000000");
    checkReg("1.5E+16", "9999999999999998", "-5000000000000001");
    checkReg("1.5E+16", "9999999999999998", "-4999999999999999");
    checkReg("-4999999999999999", "5000000000000000", "9999999999999999");
    checkReg("-4999999999999998", "5000000000000000", "9999999999999998");
    checkReg("0", "5000000000000000", "5000000000000000");
    checkReg("-1", "5000000000000000", "5000000000000001");
    checkReg("1", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "0");
    checkReg("4999999999999999", "5000000000000000", "1");
    checkReg("5000000000000001", "5000000000000000", "-1");
    checkReg("1.5E+16", "5000000000000000", "-9999999999999999");
    checkReg("1.5E+16", "5000000000000000", "-9999999999999998");
    checkReg("1E+16", "5000000000000000", "-5000000000000000");
    checkReg("1E+16", "5000000000000000", "-5000000000000001");
    checkReg("9999999999999999", "5000000000000000", "-4999999999999999");
    checkReg("-4999999999999998", "5000000000000001", "9999999999999999");
    checkReg("-4999999999999997", "5000000000000001", "9999999999999998");
    checkReg("1", "5000000000000001", "5000000000000000");
    checkReg("0", "5000000000000001", "5000000000000001");
    checkReg("2", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "0");
    checkReg("5000000000000000", "5000000000000001", "1");
    checkReg("5000000000000002", "5000000000000001", "-1");
    checkReg("1.5E+16", "5000000000000001", "-9999999999999999");
    checkReg("1.5E+16", "5000000000000001", "-9999999999999998");
    checkReg("1E+16", "5000000000000001", "-5000000000000000");
    checkReg("1E+16", "5000000000000001", "-5000000000000001");
    checkReg("1E+16", "5000000000000001", "-4999999999999999");
    checkReg("-5000000000000000", "4999999999999999", "9999999999999999");
    checkReg("-4999999999999999", "4999999999999999", "9999999999999998");
    checkReg("-1", "4999999999999999", "5000000000000000");
    checkReg("-2", "4999999999999999", "5000000000000001");
    checkReg("0", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "0");
    checkReg("4999999999999998", "4999999999999999", "1");
    checkReg("5000000000000000", "4999999999999999", "-1");
    checkReg("1.5E+16", "4999999999999999", "-9999999999999999");
    checkReg("1.5E+16", "4999999999999999", "-9999999999999998");
    checkReg("9999999999999999", "4999999999999999", "-5000000000000000");
    checkReg("1E+16", "4999999999999999", "-5000000000000001");
    checkReg("9999999999999998", "4999999999999999", "-4999999999999999");
    checkReg("-9999999999999999", "0", "9999999999999999");
    checkReg("-9999999999999998", "0", "9999999999999998");
    checkReg("-5000000000000000", "0", "5000000000000000");
    checkReg("-5000000000000001", "0", "5000000000000001");
    checkReg("-4999999999999999", "0", "4999999999999999");
    checkReg("0", "0", "0");
    checkReg("-1", "0", "1");
    checkReg("1", "0", "-1");
    checkReg("9999999999999999", "0", "-9999999999999999");
    checkReg("9999999999999998", "0", "-9999999999999998");
    checkReg("5000000000000000", "0", "-5000000000000000");
    checkReg("5000000000000001", "0", "-5000000000000001");
    checkReg("4999999999999999", "0", "-4999999999999999");
    checkReg("-9999999999999998", "1", "9999999999999999");
    checkReg("-9999999999999997", "1", "9999999999999998");
    checkReg("-4999999999999999", "1", "5000000000000000");
    checkReg("-5000000000000000", "1", "5000000000000001");
    checkReg("-4999999999999998", "1", "4999999999999999");
    checkReg("1", "1", "0");
    checkReg("0", "1", "1");
    checkReg("2", "1", "-1");
    checkReg("1E+16", "1", "-9999999999999999");
    checkReg("9999999999999999", "1", "-9999999999999998");
    checkReg("5000000000000001", "1", "-5000000000000000");
    checkReg("5000000000000002", "1", "-5000000000000001");
    checkReg("5000000000000000", "1", "-4999999999999999");
    checkReg("-1E+16", "-1", "9999999999999999");
    checkReg("-9999999999999999", "-1", "9999999999999998");
    checkReg("-5000000000000001", "-1", "5000000000000000");
    checkReg("-5000000000000002", "-1", "5000000000000001");
    checkReg("-5000000000000000", "-1", "4999999999999999");
    checkReg("-1", "-1", "0");
    checkReg("-2", "-1", "1");
    checkReg("0", "-1", "-1");
    checkReg("9999999999999998", "-1", "-9999999999999999");
    checkReg("9999999999999997", "-1", "-9999999999999998");
    checkReg("4999999999999999", "-1", "-5000000000000000");
    checkReg("5000000000000000", "-1", "-5000000000000001");
    checkReg("4999999999999998", "-1", "-4999999999999999");
    checkReg("-2E+16", "-9999999999999999", "9999999999999999");
    checkReg("-2E+16", "-9999999999999999", "9999999999999998");
    checkReg("-1.5E+16", "-9999999999999999", "5000000000000000");
    checkReg("-1.5E+16", "-9999999999999999", "5000000000000001");
    checkReg("-1.5E+16", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "0");
    checkReg("-1E+16", "-9999999999999999", "1");
    checkReg("-9999999999999998", "-9999999999999999", "-1");
    checkReg("0", "-9999999999999999", "-9999999999999999");
    checkReg("-1", "-9999999999999999", "-9999999999999998");
    checkReg("-4999999999999999", "-9999999999999999", "-5000000000000000");
    checkReg("-4999999999999998", "-9999999999999999", "-5000000000000001");
    checkReg("-5000000000000000", "-9999999999999999", "-4999999999999999");
    checkReg("-2E+16", "-9999999999999998", "9999999999999999");
    checkReg("-2E+16", "-9999999999999998", "9999999999999998");
    checkReg("-1.5E+16", "-9999999999999998", "5000000000000000");
    checkReg("-1.5E+16", "-9999999999999998", "5000000000000001");
    checkReg("-1.5E+16", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "0");
    checkReg("-9999999999999999", "-9999999999999998", "1");
    checkReg("-9999999999999997", "-9999999999999998", "-1");
    checkReg("1", "-9999999999999998", "-9999999999999999");
    checkReg("0", "-9999999999999998", "-9999999999999998");
    checkReg("-4999999999999998", "-9999999999999998", "-5000000000000000");
    checkReg("-4999999999999997", "-9999999999999998", "-5000000000000001");
    checkReg("-4999999999999999", "-9999999999999998", "-4999999999999999");
    checkReg("-1.5E+16", "-5000000000000000", "9999999999999999");
    checkReg("-1.5E+16", "-5000000000000000", "9999999999999998");
    checkReg("-1E+16", "-5000000000000000", "5000000000000000");
    checkReg("-1E+16", "-5000000000000000", "5000000000000001");
    checkReg("-9999999999999999", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "0");
    checkReg("-5000000000000001", "-5000000000000000", "1");
    checkReg("-4999999999999999", "-5000000000000000", "-1");
    checkReg("4999999999999999", "-5000000000000000", "-9999999999999999");
    checkReg("4999999999999998", "-5000000000000000", "-9999999999999998");
    checkReg("0", "-5000000000000000", "-5000000000000000");
    checkReg("1", "-5000000000000000", "-5000000000000001");
    checkReg("-1", "-5000000000000000", "-4999999999999999");
    checkReg("-1.5E+16", "-5000000000000001", "9999999999999999");
    checkReg("-1.5E+16", "-5000000000000001", "9999999999999998");
    checkReg("-1E+16", "-5000000000000001", "5000000000000000");
    checkReg("-1E+16", "-5000000000000001", "5000000000000001");
    checkReg("-1E+16", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "0");
    checkReg("-5000000000000002", "-5000000000000001", "1");
    checkReg("-5000000000000000", "-5000000000000001", "-1");
    checkReg("4999999999999998", "-5000000000000001", "-9999999999999999");
    checkReg("4999999999999997", "-5000000000000001", "-9999999999999998");
    checkReg("-1", "-5000000000000001", "-5000000000000000");
    checkReg("0", "-5000000000000001", "-5000000000000001");
    checkReg("-2", "-5000000000000001", "-4999999999999999");
    checkReg("-1.5E+16", "-4999999999999999", "9999999999999999");
    checkReg("-1.5E+16", "-4999999999999999", "9999999999999998");
    checkReg("-9999999999999999", "-4999999999999999", "5000000000000000");
    checkReg("-1E+16", "-4999999999999999", "5000000000000001");
    checkReg("-9999999999999998", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "0");
    checkReg("-5000000000000000", "-4999999999999999", "1");
    checkReg("-4999999999999998", "-4999999999999999", "-1");
    checkReg("5000000000000000", "-4999999999999999", "-9999999999999999");
    checkReg("4999999999999999", "-4999999999999999", "-9999999999999998");
    checkReg("1", "-4999999999999999", "-5000000000000000");
    checkReg("2", "-4999999999999999", "-5000000000000001");
    checkReg("0", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void testMultiply() {
    calc.setOperation("×");

    //Integer
    checkReg("9.999999999999998E+31", "9999999999999999", "9999999999999999");
    checkReg("9.999999999999997E+31", "9999999999999999", "9999999999999998");
    checkReg("5E+31", "9999999999999999", "5000000000000000");
    checkReg("5E+31", "9999999999999999", "5000000000000001");
    checkReg("4.999999999999999E+31", "9999999999999999", "4999999999999999");
    checkReg("0", "9999999999999999", "0");
    checkReg("9999999999999999", "9999999999999999", "1");
    checkReg("-9999999999999999", "9999999999999999", "-1");
    checkReg("-9.999999999999998E+31", "9999999999999999", "-9999999999999999");
    checkReg("-9.999999999999997E+31", "9999999999999999", "-9999999999999998");
    checkReg("-5E+31", "9999999999999999", "-5000000000000000");
    checkReg("-5E+31", "9999999999999999", "-5000000000000001");
    checkReg("-4.999999999999999E+31", "9999999999999999", "-4999999999999999");
    checkReg("9.999999999999997E+31", "9999999999999998", "9999999999999999");
    checkReg("9.999999999999996E+31", "9999999999999998", "9999999999999998");
    checkReg("4.999999999999999E+31", "9999999999999998", "5000000000000000");
    checkReg("5E+31", "9999999999999998", "5000000000000001");
    checkReg("4.999999999999998E+31", "9999999999999998", "4999999999999999");
    checkReg("0", "9999999999999998", "0");
    checkReg("9999999999999998", "9999999999999998", "1");
    checkReg("-9999999999999998", "9999999999999998", "-1");
    checkReg("-9.999999999999997E+31", "9999999999999998", "-9999999999999999");
    checkReg("-9.999999999999996E+31", "9999999999999998", "-9999999999999998");
    checkReg("-4.999999999999999E+31", "9999999999999998", "-5000000000000000");
    checkReg("-5E+31", "9999999999999998", "-5000000000000001");
    checkReg("-4.999999999999998E+31", "9999999999999998", "-4999999999999999");
    checkReg("5E+31", "5000000000000000", "9999999999999999");
    checkReg("4.999999999999999E+31", "5000000000000000", "9999999999999998");
    checkReg("2.5E+31", "5000000000000000", "5000000000000000");
    checkReg("2.500000000000001E+31", "5000000000000000", "5000000000000001");
    checkReg("2.5E+31", "5000000000000000", "4999999999999999");
    checkReg("0", "5000000000000000", "0");
    checkReg("5000000000000000", "5000000000000000", "1");
    checkReg("-5000000000000000", "5000000000000000", "-1");
    checkReg("-5E+31", "5000000000000000", "-9999999999999999");
    checkReg("-4.999999999999999E+31", "5000000000000000", "-9999999999999998");
    checkReg("-2.5E+31", "5000000000000000", "-5000000000000000");
    checkReg("-2.500000000000001E+31", "5000000000000000", "-5000000000000001");
    checkReg("-2.5E+31", "5000000000000000", "-4999999999999999");
    checkReg("5E+31", "5000000000000001", "9999999999999999");
    checkReg("5E+31", "5000000000000001", "9999999999999998");
    checkReg("2.500000000000001E+31", "5000000000000001", "5000000000000000");
    checkReg("2.500000000000001E+31", "5000000000000001", "5000000000000001");
    checkReg("2.5E+31", "5000000000000001", "4999999999999999");
    checkReg("0", "5000000000000001", "0");
    checkReg("5000000000000001", "5000000000000001", "1");
    checkReg("-5000000000000001", "5000000000000001", "-1");
    checkReg("-5E+31", "5000000000000001", "-9999999999999999");
    checkReg("-5E+31", "5000000000000001", "-9999999999999998");
    checkReg("-2.500000000000001E+31", "5000000000000001", "-5000000000000000");
    checkReg("-2.500000000000001E+31", "5000000000000001", "-5000000000000001");
    checkReg("-2.5E+31", "5000000000000001", "-4999999999999999");
    checkReg("4.999999999999999E+31", "4999999999999999", "9999999999999999");
    checkReg("4.999999999999998E+31", "4999999999999999", "9999999999999998");
    checkReg("2.5E+31", "4999999999999999", "5000000000000000");
    checkReg("2.5E+31", "4999999999999999", "5000000000000001");
    checkReg("2.499999999999999E+31", "4999999999999999", "4999999999999999");
    checkReg("0", "4999999999999999", "0");
    checkReg("4999999999999999", "4999999999999999", "1");
    checkReg("-4999999999999999", "4999999999999999", "-1");
    checkReg("-4.999999999999999E+31", "4999999999999999", "-9999999999999999");
    checkReg("-4.999999999999998E+31", "4999999999999999", "-9999999999999998");
    checkReg("-2.5E+31", "4999999999999999", "-5000000000000000");
    checkReg("-2.5E+31", "4999999999999999", "-5000000000000001");
    checkReg("-2.499999999999999E+31", "4999999999999999", "-4999999999999999");
    checkReg("0", "0", "9999999999999999");
    checkReg("0", "0", "9999999999999998");
    checkReg("0", "0", "5000000000000000");
    checkReg("0", "0", "5000000000000001");
    checkReg("0", "0", "4999999999999999");
    checkReg("0", "0", "0");
    checkReg("0", "0", "1");
    checkReg("0", "0", "-1");
    checkReg("0", "0", "-9999999999999999");
    checkReg("0", "0", "-9999999999999998");
    checkReg("0", "0", "-5000000000000000");
    checkReg("0", "0", "-5000000000000001");
    checkReg("0", "0", "-4999999999999999");
    checkReg("9999999999999999", "1", "9999999999999999");
    checkReg("9999999999999998", "1", "9999999999999998");
    checkReg("5000000000000000", "1", "5000000000000000");
    checkReg("5000000000000001", "1", "5000000000000001");
    checkReg("4999999999999999", "1", "4999999999999999");
    checkReg("0", "1", "0");
    checkReg("1", "1", "1");
    checkReg("-1", "1", "-1");
    checkReg("-9999999999999999", "1", "-9999999999999999");
    checkReg("-9999999999999998", "1", "-9999999999999998");
    checkReg("-5000000000000000", "1", "-5000000000000000");
    checkReg("-5000000000000001", "1", "-5000000000000001");
    checkReg("-4999999999999999", "1", "-4999999999999999");
    checkReg("-9999999999999999", "-1", "9999999999999999");
    checkReg("-9999999999999998", "-1", "9999999999999998");
    checkReg("-5000000000000000", "-1", "5000000000000000");
    checkReg("-5000000000000001", "-1", "5000000000000001");
    checkReg("-4999999999999999", "-1", "4999999999999999");
    checkReg("0", "-1", "0");
    checkReg("-1", "-1", "1");
    checkReg("1", "-1", "-1");
    checkReg("9999999999999999", "-1", "-9999999999999999");
    checkReg("9999999999999998", "-1", "-9999999999999998");
    checkReg("5000000000000000", "-1", "-5000000000000000");
    checkReg("5000000000000001", "-1", "-5000000000000001");
    checkReg("4999999999999999", "-1", "-4999999999999999");
    checkReg("-9.999999999999998E+31", "-9999999999999999", "9999999999999999");
    checkReg("-9.999999999999997E+31", "-9999999999999999", "9999999999999998");
    checkReg("-5E+31", "-9999999999999999", "5000000000000000");
    checkReg("-5E+31", "-9999999999999999", "5000000000000001");
    checkReg("-4.999999999999999E+31", "-9999999999999999", "4999999999999999");
    checkReg("0", "-9999999999999999", "0");
    checkReg("-9999999999999999", "-9999999999999999", "1");
    checkReg("9999999999999999", "-9999999999999999", "-1");
    checkReg("9.999999999999998E+31", "-9999999999999999", "-9999999999999999");
    checkReg("9.999999999999997E+31", "-9999999999999999", "-9999999999999998");
    checkReg("5E+31", "-9999999999999999", "-5000000000000000");
    checkReg("5E+31", "-9999999999999999", "-5000000000000001");
    checkReg("4.999999999999999E+31", "-9999999999999999", "-4999999999999999");
    checkReg("-9.999999999999997E+31", "-9999999999999998", "9999999999999999");
    checkReg("-9.999999999999996E+31", "-9999999999999998", "9999999999999998");
    checkReg("-4.999999999999999E+31", "-9999999999999998", "5000000000000000");
    checkReg("-5E+31", "-9999999999999998", "5000000000000001");
    checkReg("-4.999999999999998E+31", "-9999999999999998", "4999999999999999");
    checkReg("0", "-9999999999999998", "0");
    checkReg("-9999999999999998", "-9999999999999998", "1");
    checkReg("9999999999999998", "-9999999999999998", "-1");
    checkReg("9.999999999999997E+31", "-9999999999999998", "-9999999999999999");
    checkReg("9.999999999999996E+31", "-9999999999999998", "-9999999999999998");
    checkReg("4.999999999999999E+31", "-9999999999999998", "-5000000000000000");
    checkReg("5E+31", "-9999999999999998", "-5000000000000001");
    checkReg("4.999999999999998E+31", "-9999999999999998", "-4999999999999999");
    checkReg("-5E+31", "-5000000000000000", "9999999999999999");
    checkReg("-4.999999999999999E+31", "-5000000000000000", "9999999999999998");
    checkReg("-2.5E+31", "-5000000000000000", "5000000000000000");
    checkReg("-2.500000000000001E+31", "-5000000000000000", "5000000000000001");
    checkReg("-2.5E+31", "-5000000000000000", "4999999999999999");
    checkReg("0", "-5000000000000000", "0");
    checkReg("-5000000000000000", "-5000000000000000", "1");
    checkReg("5000000000000000", "-5000000000000000", "-1");
    checkReg("5E+31", "-5000000000000000", "-9999999999999999");
    checkReg("4.999999999999999E+31", "-5000000000000000", "-9999999999999998");
    checkReg("2.5E+31", "-5000000000000000", "-5000000000000000");
    checkReg("2.500000000000001E+31", "-5000000000000000", "-5000000000000001");
    checkReg("2.5E+31", "-5000000000000000", "-4999999999999999");
    checkReg("-5E+31", "-5000000000000001", "9999999999999999");
    checkReg("-5E+31", "-5000000000000001", "9999999999999998");
    checkReg("-2.500000000000001E+31", "-5000000000000001", "5000000000000000");
    checkReg("-2.500000000000001E+31", "-5000000000000001", "5000000000000001");
    checkReg("-2.5E+31", "-5000000000000001", "4999999999999999");
    checkReg("0", "-5000000000000001", "0");
    checkReg("-5000000000000001", "-5000000000000001", "1");
    checkReg("5000000000000001", "-5000000000000001", "-1");
    checkReg("5E+31", "-5000000000000001", "-9999999999999999");
    checkReg("5E+31", "-5000000000000001", "-9999999999999998");
    checkReg("2.500000000000001E+31", "-5000000000000001", "-5000000000000000");
    checkReg("2.500000000000001E+31", "-5000000000000001", "-5000000000000001");
    checkReg("2.5E+31", "-5000000000000001", "-4999999999999999");
    checkReg("-4.999999999999999E+31", "-4999999999999999", "9999999999999999");
    checkReg("-4.999999999999998E+31", "-4999999999999999", "9999999999999998");
    checkReg("-2.5E+31", "-4999999999999999", "5000000000000000");
    checkReg("-2.5E+31", "-4999999999999999", "5000000000000001");
    checkReg("-2.499999999999999E+31", "-4999999999999999", "4999999999999999");
    checkReg("0", "-4999999999999999", "0");
    checkReg("-4999999999999999", "-4999999999999999", "1");
    checkReg("4999999999999999", "-4999999999999999", "-1");
    checkReg("4.999999999999999E+31", "-4999999999999999", "-9999999999999999");
    checkReg("4.999999999999998E+31", "-4999999999999999", "-9999999999999998");
    checkReg("2.5E+31", "-4999999999999999", "-5000000000000000");
    checkReg("2.5E+31", "-4999999999999999", "-5000000000000001");
    checkReg("2.499999999999999E+31", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void testDivide() {
    calc.setOperation("÷");

    //Integer
    checkReg("1", "9999999999999999", "9999999999999999");
    checkReg("1", "9999999999999999", "9999999999999998");
    checkReg("2", "9999999999999999", "5000000000000000");
    checkReg("1.999999999999999", "9999999999999999", "5000000000000001");
    checkReg("2", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "1");
    checkReg("-9999999999999999", "9999999999999999", "-1");
    checkReg("-1", "9999999999999999", "-9999999999999999");
    checkReg("-1", "9999999999999999", "-9999999999999998");
    checkReg("-2", "9999999999999999", "-5000000000000000");
    checkReg("-1.999999999999999", "9999999999999999", "-5000000000000001");
    checkReg("-2", "9999999999999999", "-4999999999999999");
    checkReg("0.9999999999999999", "9999999999999998", "9999999999999999");
    checkReg("1", "9999999999999998", "9999999999999998");
    checkReg("2", "9999999999999998", "5000000000000000");
    checkReg("1.999999999999999", "9999999999999998", "5000000000000001");
    checkReg("2", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "1");
    checkReg("-9999999999999998", "9999999999999998", "-1");
    checkReg("-0.9999999999999999", "9999999999999998", "-9999999999999999");
    checkReg("-1", "9999999999999998", "-9999999999999998");
    checkReg("-2", "9999999999999998", "-5000000000000000");
    checkReg("-1.999999999999999", "9999999999999998", "-5000000000000001");
    checkReg("-2", "9999999999999998", "-4999999999999999");
    checkReg("0.5000000000000001", "5000000000000000", "9999999999999999");
    checkReg("0.5000000000000001", "5000000000000000", "9999999999999998");
    checkReg("1", "5000000000000000", "5000000000000000");
    checkReg("0.9999999999999998", "5000000000000000", "5000000000000001");
    checkReg("1", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "1");
    checkReg("-5000000000000000", "5000000000000000", "-1");
    checkReg("-0.5000000000000001", "5000000000000000", "-9999999999999999");
    checkReg("-0.5000000000000001", "5000000000000000", "-9999999999999998");
    checkReg("-1", "5000000000000000", "-5000000000000000");
    checkReg("-0.9999999999999998", "5000000000000000", "-5000000000000001");
    checkReg("-1", "5000000000000000", "-4999999999999999");
    checkReg("0.5000000000000002", "5000000000000001", "9999999999999999");
    checkReg("0.5000000000000002", "5000000000000001", "9999999999999998");
    checkReg("1", "5000000000000001", "5000000000000000");
    checkReg("1", "5000000000000001", "5000000000000001");
    checkReg("1", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "1");
    checkReg("-5000000000000001", "5000000000000001", "-1");
    checkReg("-0.5000000000000002", "5000000000000001", "-9999999999999999");
    checkReg("-0.5000000000000002", "5000000000000001", "-9999999999999998");
    checkReg("-1", "5000000000000001", "-5000000000000000");
    checkReg("-1", "5000000000000001", "-5000000000000001");
    checkReg("-1", "5000000000000001", "-4999999999999999");
    checkReg("0.4999999999999999", "4999999999999999", "9999999999999999");
    checkReg("0.5", "4999999999999999", "9999999999999998");
    checkReg("0.9999999999999998", "4999999999999999", "5000000000000000");
    checkReg("0.9999999999999996", "4999999999999999", "5000000000000001");
    checkReg("1", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "1");
    checkReg("-4999999999999999", "4999999999999999", "-1");
    checkReg("-0.4999999999999999", "4999999999999999", "-9999999999999999");
    checkReg("-0.5", "4999999999999999", "-9999999999999998");
    checkReg("-0.9999999999999998", "4999999999999999", "-5000000000000000");
    checkReg("-0.9999999999999996", "4999999999999999", "-5000000000000001");
    checkReg("-1", "4999999999999999", "-4999999999999999");
    checkReg("0", "0", "9999999999999999");
    checkReg("0", "0", "9999999999999998");
    checkReg("0", "0", "5000000000000000");
    checkReg("0", "0", "5000000000000001");
    checkReg("0", "0", "4999999999999999");
    checkReg("0", "0", "1");
    checkReg("0", "0", "-1");
    checkReg("0", "0", "-9999999999999999");
    checkReg("0", "0", "-9999999999999998");
    checkReg("0", "0", "-5000000000000000");
    checkReg("0", "0", "-5000000000000001");
    checkReg("0", "0", "-4999999999999999");
    checkReg("1E-16", "1", "9999999999999999");
    checkReg("1E-16", "1", "9999999999999998");
    checkReg("2E-16", "1", "5000000000000000");
    checkReg("2E-16", "1", "5000000000000001");
    checkReg("2E-16", "1", "4999999999999999");
    checkReg("1", "1", "1");
    checkReg("-1", "1", "-1");
    checkReg("-1E-16", "1", "-9999999999999999");
    checkReg("-1E-16", "1", "-9999999999999998");
    checkReg("-2E-16", "1", "-5000000000000000");
    checkReg("-2E-16", "1", "-5000000000000001");
    checkReg("-2E-16", "1", "-4999999999999999");
    checkReg("-1E-16", "-1", "9999999999999999");
    checkReg("-1E-16", "-1", "9999999999999998");
    checkReg("-2E-16", "-1", "5000000000000000");
    checkReg("-2E-16", "-1", "5000000000000001");
    checkReg("-2E-16", "-1", "4999999999999999");
    checkReg("-1", "-1", "1");
    checkReg("1", "-1", "-1");
    checkReg("1E-16", "-1", "-9999999999999999");
    checkReg("1E-16", "-1", "-9999999999999998");
    checkReg("2E-16", "-1", "-5000000000000000");
    checkReg("2E-16", "-1", "-5000000000000001");
    checkReg("2E-16", "-1", "-4999999999999999");
    checkReg("-1", "-9999999999999999", "9999999999999999");
    checkReg("-1", "-9999999999999999", "9999999999999998");
    checkReg("-2", "-9999999999999999", "5000000000000000");
    checkReg("-1.999999999999999", "-9999999999999999", "5000000000000001");
    checkReg("-2", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "1");
    checkReg("9999999999999999", "-9999999999999999", "-1");
    checkReg("1", "-9999999999999999", "-9999999999999999");
    checkReg("1", "-9999999999999999", "-9999999999999998");
    checkReg("2", "-9999999999999999", "-5000000000000000");
    checkReg("1.999999999999999", "-9999999999999999", "-5000000000000001");
    checkReg("2", "-9999999999999999", "-4999999999999999");
    checkReg("-0.9999999999999999", "-9999999999999998", "9999999999999999");
    checkReg("-1", "-9999999999999998", "9999999999999998");
    checkReg("-2", "-9999999999999998", "5000000000000000");
    checkReg("-1.999999999999999", "-9999999999999998", "5000000000000001");
    checkReg("-2", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "1");
    checkReg("9999999999999998", "-9999999999999998", "-1");
    checkReg("0.9999999999999999", "-9999999999999998", "-9999999999999999");
    checkReg("1", "-9999999999999998", "-9999999999999998");
    checkReg("2", "-9999999999999998", "-5000000000000000");
    checkReg("1.999999999999999", "-9999999999999998", "-5000000000000001");
    checkReg("2", "-9999999999999998", "-4999999999999999");
    checkReg("-0.5000000000000001", "-5000000000000000", "9999999999999999");
    checkReg("-0.5000000000000001", "-5000000000000000", "9999999999999998");
    checkReg("-1", "-5000000000000000", "5000000000000000");
    checkReg("-0.9999999999999998", "-5000000000000000", "5000000000000001");
    checkReg("-1", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "1");
    checkReg("5000000000000000", "-5000000000000000", "-1");
    checkReg("0.5000000000000001", "-5000000000000000", "-9999999999999999");
    checkReg("0.5000000000000001", "-5000000000000000", "-9999999999999998");
    checkReg("1", "-5000000000000000", "-5000000000000000");
    checkReg("0.9999999999999998", "-5000000000000000", "-5000000000000001");
    checkReg("1", "-5000000000000000", "-4999999999999999");
    checkReg("-0.5000000000000002", "-5000000000000001", "9999999999999999");
    checkReg("-0.5000000000000002", "-5000000000000001", "9999999999999998");
    checkReg("-1", "-5000000000000001", "5000000000000000");
    checkReg("-1", "-5000000000000001", "5000000000000001");
    checkReg("-1", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "1");
    checkReg("5000000000000001", "-5000000000000001", "-1");
    checkReg("0.5000000000000002", "-5000000000000001", "-9999999999999999");
    checkReg("0.5000000000000002", "-5000000000000001", "-9999999999999998");
    checkReg("1", "-5000000000000001", "-5000000000000000");
    checkReg("1", "-5000000000000001", "-5000000000000001");
    checkReg("1", "-5000000000000001", "-4999999999999999");
    checkReg("-0.4999999999999999", "-4999999999999999", "9999999999999999");
    checkReg("-0.5", "-4999999999999999", "9999999999999998");
    checkReg("-0.9999999999999998", "-4999999999999999", "5000000000000000");
    checkReg("-0.9999999999999996", "-4999999999999999", "5000000000000001");
    checkReg("-1", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "1");
    checkReg("4999999999999999", "-4999999999999999", "-1");
    checkReg("0.4999999999999999", "-4999999999999999", "-9999999999999999");
    checkReg("0.5", "-4999999999999999", "-9999999999999998");
    checkReg("0.9999999999999998", "-4999999999999999", "-5000000000000000");
    checkReg("0.9999999999999996", "-4999999999999999", "-5000000000000001");
    checkReg("1", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void reverseTest() {
    checkUnary("1E-16", "9999999999999999", REVERSE);
    checkUnary("1E-16", "9999999999999998", REVERSE);
    checkUnary("2E-16", "5000000000000000", REVERSE);
    checkUnary("2E-16", "5000000000000001", REVERSE);
    checkUnary("1", "1", REVERSE);
    checkUnary("-1", "-1", REVERSE);
    checkUnary("-1E-16", "-9999999999999999", REVERSE);
    checkUnary("-1E-16", "-9999999999999998", REVERSE);
    checkUnary("-2E-16", "-5000000000000000", REVERSE);
    checkUnary("-2E-16", "-5000000000000001", REVERSE);
    checkUnary("-2E-16", "-4999999999999999", REVERSE);

    //todo: Float val
  }

  @Test
  void checkPow() {
    //Integer
    checkUnary("9.999999999999998E+31", "9999999999999999", POW);
    checkUnary("9.999999999999996E+31", "9999999999999998", POW);
    checkUnary("2.5E+31", "5000000000000000", POW);
    checkUnary("2.500000000000001E+31", "5000000000000001", POW);
    checkUnary("2.499999999999999E+31", "4999999999999999", POW);
    checkUnary("0", "0", POW);
    checkUnary("1", "1", POW);
    checkUnary("1", "-1", POW);
    checkUnary("9.999999999999998E+31", "-9999999999999999", POW);
    checkUnary("9.999999999999998E+31", "-9999999999999999", POW);
    checkUnary("9.999999999999996E+31", "-9999999999999998", POW);
    checkUnary("2.5E+31", "-5000000000000000", POW);
    checkUnary("2.500000000000001E+31", "-5000000000000001", POW);
    checkUnary("2.499999999999999E+31", "-4999999999999999", POW);


    //todo: Float
  }

  @Test
  void negateTest() {
    //Integer
    checkUnary("-9999999999999999", "9999999999999999", NEGATE);
    checkUnary("-9999999999999998", "9999999999999998", NEGATE);
    checkUnary("-5000000000000000", "5000000000000000", NEGATE);
    checkUnary("-5000000000000001", "5000000000000001", NEGATE);
    checkUnary("-4999999999999999", "4999999999999999", NEGATE);
    checkUnary("0", "0", NEGATE);
    checkUnary("-1", "1", NEGATE);
    checkUnary("1", "-1", NEGATE);
    checkUnary("1", "-1", NEGATE);
    checkUnary("9999999999999999", "-9999999999999999", NEGATE);
    checkUnary("9999999999999998", "-9999999999999998", NEGATE);
    checkUnary("5000000000000000", "-5000000000000000", NEGATE);
    checkUnary("5000000000000001", "-5000000000000001", NEGATE);
    checkUnary("4999999999999999", "-4999999999999999", NEGATE);

    //todo: Float
  }

  @Test
  void sqrtTest() {
    //Integer
    checkUnary("99999999.99999999", "9999999999999999", SQRT);
    checkUnary("99999999.99999999", "9999999999999998", "√");
    checkUnary("70710678.11865475", "5000000000000000", "√");
    checkUnary("70710678.11865476", "5000000000000001", "√");
    checkUnary("70710678.11865475", "4999999999999999", "√");
    checkUnary("0", "0", "√");
    checkUnary("1", "1", "√");

    //todo: Float
  }

  @Test
  void percentTest() {
    //Integer
    checkPercent("9.999999999999998E+29", "9999999999999999", "9999999999999999");
    checkPercent("9.999999999999997E+29", "9999999999999999", "9999999999999998");
    checkPercent("5E+29", "9999999999999999", "5000000000000000");
    checkPercent("5E+29", "9999999999999999", "5000000000000001");
    checkPercent("4.999999999999999E+29", "9999999999999999", "4999999999999999");
    checkPercent("99999999999999.99", "9999999999999999", "1");
    checkPercent("-99999999999999.99", "9999999999999999", "-1");
    checkPercent("-9.999999999999998E+29", "9999999999999999", "-9999999999999999");
    checkPercent("-9.999999999999997E+29", "9999999999999999", "-9999999999999998");
    checkPercent("-5E+29", "9999999999999999", "-5000000000000000");
    checkPercent("-5E+29", "9999999999999999", "-5000000000000001");
    checkPercent("-4.999999999999999E+29", "9999999999999999", "-4999999999999999");
    checkPercent("9.999999999999997E+29", "9999999999999998", "9999999999999999");
    checkPercent("9.999999999999996E+29", "9999999999999998", "9999999999999998");
    checkPercent("4.999999999999999E+29", "9999999999999998", "5000000000000000");
    checkPercent("5E+29", "9999999999999998", "5000000000000001");
    checkPercent("4.999999999999998E+29", "9999999999999998", "4999999999999999");
    checkPercent("99999999999999.98", "9999999999999998", "1");
    checkPercent("-99999999999999.98", "9999999999999998", "-1");
    checkPercent("-9.999999999999997E+29", "9999999999999998", "-9999999999999999");
    checkPercent("-9.999999999999996E+29", "9999999999999998", "-9999999999999998");
    checkPercent("-4.999999999999999E+29", "9999999999999998", "-5000000000000000");
    checkPercent("-5E+29", "9999999999999998", "-5000000000000001");
    checkPercent("-4.999999999999998E+29", "9999999999999998", "-4999999999999999");
    checkPercent("5E+29", "5000000000000000", "9999999999999999");
    checkPercent("4.999999999999999E+29", "5000000000000000", "9999999999999998");
    checkPercent("2.5E+29", "5000000000000000", "5000000000000000");
    checkPercent("2.500000000000001E+29", "5000000000000000", "5000000000000001");
    checkPercent("2.5E+29", "5000000000000000", "4999999999999999");
    checkPercent("50000000000000", "5000000000000000", "1");
    checkPercent("-50000000000000", "5000000000000000", "-1");
    checkPercent("-5E+29", "5000000000000000", "-9999999999999999");
    checkPercent("-4.999999999999999E+29", "5000000000000000", "-9999999999999998");
    checkPercent("-2.5E+29", "5000000000000000", "-5000000000000000");
    checkPercent("-2.500000000000001E+29", "5000000000000000", "-5000000000000001");
    checkPercent("-2.5E+29", "5000000000000000", "-4999999999999999");
    checkPercent("5E+29", "5000000000000001", "9999999999999999");
    checkPercent("5E+29", "5000000000000001", "9999999999999998");
    checkPercent("2.500000000000001E+29", "5000000000000001", "5000000000000000");
    checkPercent("2.500000000000001E+29", "5000000000000001", "5000000000000001");
    checkPercent("2.5E+29", "5000000000000001", "4999999999999999");
    checkPercent("50000000000000.01", "5000000000000001", "1");
    checkPercent("-50000000000000.01", "5000000000000001", "-1");
    checkPercent("-5E+29", "5000000000000001", "-9999999999999999");
    checkPercent("-5E+29", "5000000000000001", "-9999999999999998");
    checkPercent("-2.500000000000001E+29", "5000000000000001", "-5000000000000000");
    checkPercent("-2.500000000000001E+29", "5000000000000001", "-5000000000000001");
    checkPercent("-2.5E+29", "5000000000000001", "-4999999999999999");
    checkPercent("4.999999999999999E+29", "4999999999999999", "9999999999999999");
    checkPercent("4.999999999999998E+29", "4999999999999999", "9999999999999998");
    checkPercent("2.5E+29", "4999999999999999", "5000000000000000");
    checkPercent("2.5E+29", "4999999999999999", "5000000000000001");
    checkPercent("2.499999999999999E+29", "4999999999999999", "4999999999999999");
    checkPercent("49999999999999.99", "4999999999999999", "1");
    checkPercent("-49999999999999.99", "4999999999999999", "-1");
    checkPercent("-4.999999999999999E+29", "4999999999999999", "-9999999999999999");
    checkPercent("-4.999999999999998E+29", "4999999999999999", "-9999999999999998");
    checkPercent("-2.5E+29", "4999999999999999", "-5000000000000000");
    checkPercent("-2.5E+29", "4999999999999999", "-5000000000000001");
    checkPercent("-2.499999999999999E+29", "4999999999999999", "-4999999999999999");
    checkPercent("0", "0", "9999999999999999");
    checkPercent("0", "0", "9999999999999998");
    checkPercent("0", "0", "5000000000000000");
    checkPercent("0", "0", "5000000000000001");
    checkPercent("0", "0", "4999999999999999");
    checkPercent("0", "0", "1");
    checkPercent("0", "0", "-1");
    checkPercent("0", "0", "-9999999999999999");
    checkPercent("0", "0", "-9999999999999998");
    checkPercent("0", "0", "-5000000000000000");
    checkPercent("0", "0", "-5000000000000001");
    checkPercent("0", "0", "-4999999999999999");
    checkPercent("99999999999999.99", "1", "9999999999999999");
    checkPercent("99999999999999.98", "1", "9999999999999998");
    checkPercent("50000000000000", "1", "5000000000000000");
    checkPercent("50000000000000.01", "1", "5000000000000001");
    checkPercent("49999999999999.99", "1", "4999999999999999");
    checkPercent("0.01", "1", "1");
    checkPercent("-0.01", "1", "-1");
    checkPercent("-99999999999999.99", "1", "-9999999999999999");
    checkPercent("-99999999999999.98", "1", "-9999999999999998");
    checkPercent("-50000000000000", "1", "-5000000000000000");
    checkPercent("-50000000000000.01", "1", "-5000000000000001");
    checkPercent("-49999999999999.99", "1", "-4999999999999999");
    checkPercent("-99999999999999.99", "-1", "9999999999999999");
    checkPercent("-99999999999999.98", "-1", "9999999999999998");
    checkPercent("-50000000000000", "-1", "5000000000000000");
    checkPercent("-50000000000000.01", "-1", "5000000000000001");
    checkPercent("-49999999999999.99", "-1", "4999999999999999");
    checkPercent("-0.01", "-1", "1");
    checkPercent("0.01", "-1", "-1");
    checkPercent("99999999999999.99", "-1", "-9999999999999999");
    checkPercent("99999999999999.98", "-1", "-9999999999999998");
    checkPercent("50000000000000", "-1", "-5000000000000000");
    checkPercent("50000000000000.01", "-1", "-5000000000000001");
    checkPercent("49999999999999.99", "-1", "-4999999999999999");
    checkPercent("-9.999999999999998E+29", "-9999999999999999", "9999999999999999");
    checkPercent("-9.999999999999997E+29", "-9999999999999999", "9999999999999998");
    checkPercent("-5E+29", "-9999999999999999", "5000000000000000");
    checkPercent("-5E+29", "-9999999999999999", "5000000000000001");
    checkPercent("-4.999999999999999E+29", "-9999999999999999", "4999999999999999");
    checkPercent("-99999999999999.99", "-9999999999999999", "1");
    checkPercent("99999999999999.99", "-9999999999999999", "-1");
    checkPercent("9.999999999999998E+29", "-9999999999999999", "-9999999999999999");
    checkPercent("9.999999999999997E+29", "-9999999999999999", "-9999999999999998");
    checkPercent("5E+29", "-9999999999999999", "-5000000000000000");
    checkPercent("5E+29", "-9999999999999999", "-5000000000000001");
    checkPercent("4.999999999999999E+29", "-9999999999999999", "-4999999999999999");
    checkPercent("-9.999999999999997E+29", "-9999999999999998", "9999999999999999");
    checkPercent("-9.999999999999996E+29", "-9999999999999998", "9999999999999998");
    checkPercent("-4.999999999999999E+29", "-9999999999999998", "5000000000000000");
    checkPercent("-5E+29", "-9999999999999998", "5000000000000001");
    checkPercent("-4.999999999999998E+29", "-9999999999999998", "4999999999999999");
    checkPercent("-99999999999999.98", "-9999999999999998", "1");
    checkPercent("99999999999999.98", "-9999999999999998", "-1");
    checkPercent("9.999999999999997E+29", "-9999999999999998", "-9999999999999999");
    checkPercent("9.999999999999996E+29", "-9999999999999998", "-9999999999999998");
    checkPercent("4.999999999999999E+29", "-9999999999999998", "-5000000000000000");
    checkPercent("5E+29", "-9999999999999998", "-5000000000000001");
    checkPercent("4.999999999999998E+29", "-9999999999999998", "-4999999999999999");
    checkPercent("-5E+29", "-5000000000000000", "9999999999999999");
    checkPercent("-4.999999999999999E+29", "-5000000000000000", "9999999999999998");
    checkPercent("-2.5E+29", "-5000000000000000", "5000000000000000");
    checkPercent("-2.500000000000001E+29", "-5000000000000000", "5000000000000001");
    checkPercent("-2.5E+29", "-5000000000000000", "4999999999999999");
    checkPercent("-50000000000000", "-5000000000000000", "1");
    checkPercent("50000000000000", "-5000000000000000", "-1");
    checkPercent("5E+29", "-5000000000000000", "-9999999999999999");
    checkPercent("4.999999999999999E+29", "-5000000000000000", "-9999999999999998");
    checkPercent("2.5E+29", "-5000000000000000", "-5000000000000000");
    checkPercent("2.500000000000001E+29", "-5000000000000000", "-5000000000000001");
    checkPercent("2.5E+29", "-5000000000000000", "-4999999999999999");
    checkPercent("-5E+29", "-5000000000000001", "9999999999999999");
    checkPercent("-5E+29", "-5000000000000001", "9999999999999998");
    checkPercent("-2.500000000000001E+29", "-5000000000000001", "5000000000000000");
    checkPercent("-2.500000000000001E+29", "-5000000000000001", "5000000000000001");
    checkPercent("-2.5E+29", "-5000000000000001", "4999999999999999");
    checkPercent("-50000000000000.01", "-5000000000000001", "1");
    checkPercent("50000000000000.01", "-5000000000000001", "-1");
    checkPercent("5E+29", "-5000000000000001", "-9999999999999999");
    checkPercent("5E+29", "-5000000000000001", "-9999999999999998");
    checkPercent("2.500000000000001E+29", "-5000000000000001", "-5000000000000000");
    checkPercent("2.500000000000001E+29", "-5000000000000001", "-5000000000000001");
    checkPercent("2.5E+29", "-5000000000000001", "-4999999999999999");
    checkPercent("-4.999999999999999E+29", "-4999999999999999", "9999999999999999");
    checkPercent("-4.999999999999998E+29", "-4999999999999999", "9999999999999998");
    checkPercent("-2.5E+29", "-4999999999999999", "5000000000000000");
    checkPercent("-2.5E+29", "-4999999999999999", "5000000000000001");
    checkPercent("-2.499999999999999E+29", "-4999999999999999", "4999999999999999");
    checkPercent("-49999999999999.99", "-4999999999999999", "1");
    checkPercent("49999999999999.99", "-4999999999999999", "-1");
    checkPercent("4.999999999999999E+29", "-4999999999999999", "-9999999999999999");
    checkPercent("4.999999999999998E+29", "-4999999999999999", "-9999999999999998");
    checkPercent("2.5E+29", "-4999999999999999", "-5000000000000000");
    checkPercent("2.5E+29", "-4999999999999999", "-5000000000000001");
    checkPercent("2.499999999999999E+29", "-4999999999999999", "-4999999999999999");
  }

  @BeforeEach
  void before() {
    calc = new CalculatorModel();
  }

  private void checkReg(String expected, String left, String right) {
    calc.setLeftOperand(new BigDecimal(left));
    calc.setRightOperand(new BigDecimal(right));

    String actual = calc.getBinaryOperationResult();

    assertEquals(expected, actual);
  }

  private void checkUnary(String expected, String num, String op) {
    String actual = calc.getUnaryOperationResult(op, num);

    assertEquals(expected, actual);
  }

  private void checkPercent(String expected, String left, String right) {
    calc.setLeftOperand(new BigDecimal(left));
    calc.setRightOperand(new BigDecimal(right));

    String actual = calc.getPercentOperation();

    assertEquals(expected, actual);
  }
}
