package com.implemica.calculator.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class CalculatorModelTest {
  private static final String REVERSE = "1/";
  private static final String POW = "sqr";
  private static final String NEGATE = "negate";
  private static final String SQRT = "âˆš";

  private final static BigDecimal MAX = new BigDecimal("1E10000");
  private final static BigDecimal MIN = new BigDecimal("1E-10000");
  private final static BigDecimal MAX_POS = MAX.add(MIN);
  private final static BigDecimal MIN_POS = MIN.add(MIN);

  private CalculatorModel calc;

  @Test
  void plusTest() {
    calc.setOperation("+");

    //Integer
    checkReg("19999999999999998", "9999999999999999", "9999999999999999");
    checkReg("19999999999999997", "9999999999999999", "9999999999999998");
    checkReg("14999999999999999", "9999999999999999", "5000000000000000");
    checkReg("15000000000000000", "9999999999999999", "5000000000000001");
    checkReg("14999999999999998", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "0");
    checkReg("10000000000000000", "9999999999999999", "1");
    checkReg("9999999999999998", "9999999999999999", "-1");
    checkReg("0", "9999999999999999", "-9999999999999999");
    checkReg("1", "9999999999999999", "-9999999999999998");
    checkReg("4999999999999999", "9999999999999999", "-5000000000000000");
    checkReg("4999999999999998", "9999999999999999", "-5000000000000001");
    checkReg("5000000000000000", "9999999999999999", "-4999999999999999");
    checkReg("19999999999999997", "9999999999999998", "9999999999999999");
    checkReg("19999999999999996", "9999999999999998", "9999999999999998");
    checkReg("14999999999999998", "9999999999999998", "5000000000000000");
    checkReg("14999999999999999", "9999999999999998", "5000000000000001");
    checkReg("14999999999999997", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "0");
    checkReg("9999999999999999", "9999999999999998", "1");
    checkReg("9999999999999997", "9999999999999998", "-1");
    checkReg("-1", "9999999999999998", "-9999999999999999");
    checkReg("0", "9999999999999998", "-9999999999999998");
    checkReg("4999999999999998", "9999999999999998", "-5000000000000000");
    checkReg("4999999999999997", "9999999999999998", "-5000000000000001");
    checkReg("4999999999999999", "9999999999999998", "-4999999999999999");
    checkReg("14999999999999999", "5000000000000000", "9999999999999999");
    checkReg("14999999999999998", "5000000000000000", "9999999999999998");
    checkReg("10000000000000000", "5000000000000000", "5000000000000000");
    checkReg("10000000000000001", "5000000000000000", "5000000000000001");
    checkReg("9999999999999999", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "0");
    checkReg("5000000000000001", "5000000000000000", "1");
    checkReg("4999999999999999", "5000000000000000", "-1");
    checkReg("-4999999999999999", "5000000000000000", "-9999999999999999");
    checkReg("-4999999999999998", "5000000000000000", "-9999999999999998");
    checkReg("0", "5000000000000000", "-5000000000000000");
    checkReg("-1", "5000000000000000", "-5000000000000001");
    checkReg("1", "5000000000000000", "-4999999999999999");
    checkReg("15000000000000000", "5000000000000001", "9999999999999999");
    checkReg("14999999999999999", "5000000000000001", "9999999999999998");
    checkReg("10000000000000001", "5000000000000001", "5000000000000000");
    checkReg("10000000000000002", "5000000000000001", "5000000000000001");
    checkReg("10000000000000000", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "0");
    checkReg("5000000000000002", "5000000000000001", "1");
    checkReg("5000000000000000", "5000000000000001", "-1");
    checkReg("-4999999999999998", "5000000000000001", "-9999999999999999");
    checkReg("-4999999999999997", "5000000000000001", "-9999999999999998");
    checkReg("1", "5000000000000001", "-5000000000000000");
    checkReg("0", "5000000000000001", "-5000000000000001");
    checkReg("2", "5000000000000001", "-4999999999999999");
    checkReg("14999999999999998", "4999999999999999", "9999999999999999");
    checkReg("14999999999999997", "4999999999999999", "9999999999999998");
    checkReg("9999999999999999", "4999999999999999", "5000000000000000");
    checkReg("10000000000000000", "4999999999999999", "5000000000000001");
    checkReg("9999999999999998", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "0");
    checkReg("5000000000000000", "4999999999999999", "1");
    checkReg("4999999999999998", "4999999999999999", "-1");
    checkReg("-5000000000000000", "4999999999999999", "-9999999999999999");
    checkReg("-4999999999999999", "4999999999999999", "-9999999999999998");
    checkReg("-1", "4999999999999999", "-5000000000000000");
    checkReg("-2", "4999999999999999", "-5000000000000001");
    checkReg("0", "4999999999999999", "-4999999999999999");
    checkReg("9999999999999999", "0", "9999999999999999");
    checkReg("9999999999999998", "0", "9999999999999998");
    checkReg("5000000000000000", "0", "5000000000000000");
    checkReg("5000000000000001", "0", "5000000000000001");
    checkReg("4999999999999999", "0", "4999999999999999");
    checkReg("0", "0", "0");
    checkReg("1", "0", "1");
    checkReg("-1", "0", "-1");
    checkReg("-9999999999999999", "0", "-9999999999999999");
    checkReg("-9999999999999998", "0", "-9999999999999998");
    checkReg("-5000000000000000", "0", "-5000000000000000");
    checkReg("-5000000000000001", "0", "-5000000000000001");
    checkReg("-4999999999999999", "0", "-4999999999999999");
    checkReg("10000000000000000", "1", "9999999999999999");
    checkReg("9999999999999999", "1", "9999999999999998");
    checkReg("5000000000000001", "1", "5000000000000000");
    checkReg("5000000000000002", "1", "5000000000000001");
    checkReg("5000000000000000", "1", "4999999999999999");
    checkReg("1", "1", "0");
    checkReg("2", "1", "1");
    checkReg("0", "1", "-1");
    checkReg("-9999999999999998", "1", "-9999999999999999");
    checkReg("-9999999999999997", "1", "-9999999999999998");
    checkReg("-4999999999999999", "1", "-5000000000000000");
    checkReg("-5000000000000000", "1", "-5000000000000001");
    checkReg("-4999999999999998", "1", "-4999999999999999");
    checkReg("9999999999999998", "-1", "9999999999999999");
    checkReg("9999999999999997", "-1", "9999999999999998");
    checkReg("4999999999999999", "-1", "5000000000000000");
    checkReg("5000000000000000", "-1", "5000000000000001");
    checkReg("4999999999999998", "-1", "4999999999999999");
    checkReg("-1", "-1", "0");
    checkReg("0", "-1", "1");
    checkReg("-2", "-1", "-1");
    checkReg("-10000000000000000", "-1", "-9999999999999999");
    checkReg("-9999999999999999", "-1", "-9999999999999998");
    checkReg("-5000000000000001", "-1", "-5000000000000000");
    checkReg("-5000000000000002", "-1", "-5000000000000001");
    checkReg("-5000000000000000", "-1", "-4999999999999999");
    checkReg("0", "-9999999999999999", "9999999999999999");
    checkReg("-1", "-9999999999999999", "9999999999999998");
    checkReg("-4999999999999999", "-9999999999999999", "5000000000000000");
    checkReg("-4999999999999998", "-9999999999999999", "5000000000000001");
    checkReg("-5000000000000000", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "0");
    checkReg("-9999999999999998", "-9999999999999999", "1");
    checkReg("-10000000000000000", "-9999999999999999", "-1");
    checkReg("-19999999999999998", "-9999999999999999", "-9999999999999999");
    checkReg("-19999999999999997", "-9999999999999999", "-9999999999999998");
    checkReg("-14999999999999999", "-9999999999999999", "-5000000000000000");
    checkReg("-15000000000000000", "-9999999999999999", "-5000000000000001");
    checkReg("-14999999999999998", "-9999999999999999", "-4999999999999999");
    checkReg("1", "-9999999999999998", "9999999999999999");
    checkReg("0", "-9999999999999998", "9999999999999998");
    checkReg("-4999999999999998", "-9999999999999998", "5000000000000000");
    checkReg("-4999999999999997", "-9999999999999998", "5000000000000001");
    checkReg("-4999999999999999", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "0");
    checkReg("-9999999999999997", "-9999999999999998", "1");
    checkReg("-9999999999999999", "-9999999999999998", "-1");
    checkReg("-19999999999999997", "-9999999999999998", "-9999999999999999");
    checkReg("-19999999999999996", "-9999999999999998", "-9999999999999998");
    checkReg("-14999999999999998", "-9999999999999998", "-5000000000000000");
    checkReg("-14999999999999999", "-9999999999999998", "-5000000000000001");
    checkReg("-14999999999999997", "-9999999999999998", "-4999999999999999");
    checkReg("4999999999999999", "-5000000000000000", "9999999999999999");
    checkReg("4999999999999998", "-5000000000000000", "9999999999999998");
    checkReg("0", "-5000000000000000", "5000000000000000");
    checkReg("1", "-5000000000000000", "5000000000000001");
    checkReg("-1", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "0");
    checkReg("-4999999999999999", "-5000000000000000", "1");
    checkReg("-5000000000000001", "-5000000000000000", "-1");
    checkReg("-14999999999999999", "-5000000000000000", "-9999999999999999");
    checkReg("-14999999999999998", "-5000000000000000", "-9999999999999998");
    checkReg("-10000000000000000", "-5000000000000000", "-5000000000000000");
    checkReg("-10000000000000001", "-5000000000000000", "-5000000000000001");
    checkReg("-9999999999999999", "-5000000000000000", "-4999999999999999");
    checkReg("4999999999999998", "-5000000000000001", "9999999999999999");
    checkReg("4999999999999997", "-5000000000000001", "9999999999999998");
    checkReg("-1", "-5000000000000001", "5000000000000000");
    checkReg("0", "-5000000000000001", "5000000000000001");
    checkReg("-2", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "0");
    checkReg("-5000000000000000", "-5000000000000001", "1");
    checkReg("-5000000000000002", "-5000000000000001", "-1");
    checkReg("-15000000000000000", "-5000000000000001", "-9999999999999999");
    checkReg("-14999999999999999", "-5000000000000001", "-9999999999999998");
    checkReg("-10000000000000001", "-5000000000000001", "-5000000000000000");
    checkReg("-10000000000000002", "-5000000000000001", "-5000000000000001");
    checkReg("-10000000000000000", "-5000000000000001", "-4999999999999999");
    checkReg("5000000000000000", "-4999999999999999", "9999999999999999");
    checkReg("4999999999999999", "-4999999999999999", "9999999999999998");
    checkReg("1", "-4999999999999999", "5000000000000000");
    checkReg("2", "-4999999999999999", "5000000000000001");
    checkReg("0", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "0");
    checkReg("-4999999999999998", "-4999999999999999", "1");
    checkReg("-5000000000000000", "-4999999999999999", "-1");
    checkReg("-14999999999999998", "-4999999999999999", "-9999999999999999");
    checkReg("-14999999999999997", "-4999999999999999", "-9999999999999998");
    checkReg("-9999999999999999", "-4999999999999999", "-5000000000000000");
    checkReg("-10000000000000000", "-4999999999999999", "-5000000000000001");
    checkReg("-9999999999999998", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void minusTest() {
    calc.setOperation("-");

    //Integer
    checkReg("0", "9999999999999999", "9999999999999999");
    checkReg("1", "9999999999999999", "9999999999999998");
    checkReg("4999999999999999", "9999999999999999", "5000000000000000");
    checkReg("4999999999999998", "9999999999999999", "5000000000000001");
    checkReg("5000000000000000", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "0");
    checkReg("9999999999999998", "9999999999999999", "1");
    checkReg("10000000000000000", "9999999999999999", "-1");
    checkReg("19999999999999998", "9999999999999999", "-9999999999999999");
    checkReg("19999999999999997", "9999999999999999", "-9999999999999998");
    checkReg("14999999999999999", "9999999999999999", "-5000000000000000");
    checkReg("15000000000000000", "9999999999999999", "-5000000000000001");
    checkReg("14999999999999998", "9999999999999999", "-4999999999999999");
    checkReg("-1", "9999999999999998", "9999999999999999");
    checkReg("0", "9999999999999998", "9999999999999998");
    checkReg("4999999999999998", "9999999999999998", "5000000000000000");
    checkReg("4999999999999997", "9999999999999998", "5000000000000001");
    checkReg("4999999999999999", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "0");
    checkReg("9999999999999997", "9999999999999998", "1");
    checkReg("9999999999999999", "9999999999999998", "-1");
    checkReg("19999999999999997", "9999999999999998", "-9999999999999999");
    checkReg("19999999999999996", "9999999999999998", "-9999999999999998");
    checkReg("14999999999999998", "9999999999999998", "-5000000000000000");
    checkReg("14999999999999999", "9999999999999998", "-5000000000000001");
    checkReg("14999999999999997", "9999999999999998", "-4999999999999999");
    checkReg("-4999999999999999", "5000000000000000", "9999999999999999");
    checkReg("-4999999999999998", "5000000000000000", "9999999999999998");
    checkReg("0", "5000000000000000", "5000000000000000");
    checkReg("-1", "5000000000000000", "5000000000000001");
    checkReg("1", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "0");
    checkReg("4999999999999999", "5000000000000000", "1");
    checkReg("5000000000000001", "5000000000000000", "-1");
    checkReg("14999999999999999", "5000000000000000", "-9999999999999999");
    checkReg("14999999999999998", "5000000000000000", "-9999999999999998");
    checkReg("10000000000000000", "5000000000000000", "-5000000000000000");
    checkReg("10000000000000001", "5000000000000000", "-5000000000000001");
    checkReg("9999999999999999", "5000000000000000", "-4999999999999999");
    checkReg("-4999999999999998", "5000000000000001", "9999999999999999");
    checkReg("-4999999999999997", "5000000000000001", "9999999999999998");
    checkReg("1", "5000000000000001", "5000000000000000");
    checkReg("0", "5000000000000001", "5000000000000001");
    checkReg("2", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "0");
    checkReg("5000000000000000", "5000000000000001", "1");
    checkReg("5000000000000002", "5000000000000001", "-1");
    checkReg("15000000000000000", "5000000000000001", "-9999999999999999");
    checkReg("14999999999999999", "5000000000000001", "-9999999999999998");
    checkReg("10000000000000001", "5000000000000001", "-5000000000000000");
    checkReg("10000000000000002", "5000000000000001", "-5000000000000001");
    checkReg("10000000000000000", "5000000000000001", "-4999999999999999");
    checkReg("-5000000000000000", "4999999999999999", "9999999999999999");
    checkReg("-4999999999999999", "4999999999999999", "9999999999999998");
    checkReg("-1", "4999999999999999", "5000000000000000");
    checkReg("-2", "4999999999999999", "5000000000000001");
    checkReg("0", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "0");
    checkReg("4999999999999998", "4999999999999999", "1");
    checkReg("5000000000000000", "4999999999999999", "-1");
    checkReg("14999999999999998", "4999999999999999", "-9999999999999999");
    checkReg("14999999999999997", "4999999999999999", "-9999999999999998");
    checkReg("9999999999999999", "4999999999999999", "-5000000000000000");
    checkReg("10000000000000000", "4999999999999999", "-5000000000000001");
    checkReg("9999999999999998", "4999999999999999", "-4999999999999999");
    checkReg("-9999999999999999", "0", "9999999999999999");
    checkReg("-9999999999999998", "0", "9999999999999998");
    checkReg("-5000000000000000", "0", "5000000000000000");
    checkReg("-5000000000000001", "0", "5000000000000001");
    checkReg("-4999999999999999", "0", "4999999999999999");
    checkReg("0", "0", "0");
    checkReg("-1", "0", "1");
    checkReg("1", "0", "-1");
    checkReg("9999999999999999", "0", "-9999999999999999");
    checkReg("9999999999999998", "0", "-9999999999999998");
    checkReg("5000000000000000", "0", "-5000000000000000");
    checkReg("5000000000000001", "0", "-5000000000000001");
    checkReg("4999999999999999", "0", "-4999999999999999");
    checkReg("-9999999999999998", "1", "9999999999999999");
    checkReg("-9999999999999997", "1", "9999999999999998");
    checkReg("-4999999999999999", "1", "5000000000000000");
    checkReg("-5000000000000000", "1", "5000000000000001");
    checkReg("-4999999999999998", "1", "4999999999999999");
    checkReg("1", "1", "0");
    checkReg("0", "1", "1");
    checkReg("2", "1", "-1");
    checkReg("10000000000000000", "1", "-9999999999999999");
    checkReg("9999999999999999", "1", "-9999999999999998");
    checkReg("5000000000000001", "1", "-5000000000000000");
    checkReg("5000000000000002", "1", "-5000000000000001");
    checkReg("5000000000000000", "1", "-4999999999999999");
    checkReg("-10000000000000000", "-1", "9999999999999999");
    checkReg("-9999999999999999", "-1", "9999999999999998");
    checkReg("-5000000000000001", "-1", "5000000000000000");
    checkReg("-5000000000000002", "-1", "5000000000000001");
    checkReg("-5000000000000000", "-1", "4999999999999999");
    checkReg("-1", "-1", "0");
    checkReg("-2", "-1", "1");
    checkReg("0", "-1", "-1");
    checkReg("9999999999999998", "-1", "-9999999999999999");
    checkReg("9999999999999997", "-1", "-9999999999999998");
    checkReg("4999999999999999", "-1", "-5000000000000000");
    checkReg("5000000000000000", "-1", "-5000000000000001");
    checkReg("4999999999999998", "-1", "-4999999999999999");
    checkReg("-19999999999999998", "-9999999999999999", "9999999999999999");
    checkReg("-19999999999999997", "-9999999999999999", "9999999999999998");
    checkReg("-14999999999999999", "-9999999999999999", "5000000000000000");
    checkReg("-15000000000000000", "-9999999999999999", "5000000000000001");
    checkReg("-14999999999999998", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "0");
    checkReg("-10000000000000000", "-9999999999999999", "1");
    checkReg("-9999999999999998", "-9999999999999999", "-1");
    checkReg("0", "-9999999999999999", "-9999999999999999");
    checkReg("-1", "-9999999999999999", "-9999999999999998");
    checkReg("-4999999999999999", "-9999999999999999", "-5000000000000000");
    checkReg("-4999999999999998", "-9999999999999999", "-5000000000000001");
    checkReg("-5000000000000000", "-9999999999999999", "-4999999999999999");
    checkReg("-19999999999999997", "-9999999999999998", "9999999999999999");
    checkReg("-19999999999999996", "-9999999999999998", "9999999999999998");
    checkReg("-14999999999999998", "-9999999999999998", "5000000000000000");
    checkReg("-14999999999999999", "-9999999999999998", "5000000000000001");
    checkReg("-14999999999999997", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "0");
    checkReg("-9999999999999999", "-9999999999999998", "1");
    checkReg("-9999999999999997", "-9999999999999998", "-1");
    checkReg("1", "-9999999999999998", "-9999999999999999");
    checkReg("0", "-9999999999999998", "-9999999999999998");
    checkReg("-4999999999999998", "-9999999999999998", "-5000000000000000");
    checkReg("-4999999999999997", "-9999999999999998", "-5000000000000001");
    checkReg("-4999999999999999", "-9999999999999998", "-4999999999999999");
    checkReg("-14999999999999999", "-5000000000000000", "9999999999999999");
    checkReg("-14999999999999998", "-5000000000000000", "9999999999999998");
    checkReg("-10000000000000000", "-5000000000000000", "5000000000000000");
    checkReg("-10000000000000001", "-5000000000000000", "5000000000000001");
    checkReg("-9999999999999999", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "0");
    checkReg("-5000000000000001", "-5000000000000000", "1");
    checkReg("-4999999999999999", "-5000000000000000", "-1");
    checkReg("4999999999999999", "-5000000000000000", "-9999999999999999");
    checkReg("4999999999999998", "-5000000000000000", "-9999999999999998");
    checkReg("0", "-5000000000000000", "-5000000000000000");
    checkReg("1", "-5000000000000000", "-5000000000000001");
    checkReg("-1", "-5000000000000000", "-4999999999999999");
    checkReg("-15000000000000000", "-5000000000000001", "9999999999999999");
    checkReg("-14999999999999999", "-5000000000000001", "9999999999999998");
    checkReg("-10000000000000001", "-5000000000000001", "5000000000000000");
    checkReg("-10000000000000002", "-5000000000000001", "5000000000000001");
    checkReg("-10000000000000000", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "0");
    checkReg("-5000000000000002", "-5000000000000001", "1");
    checkReg("-5000000000000000", "-5000000000000001", "-1");
    checkReg("4999999999999998", "-5000000000000001", "-9999999999999999");
    checkReg("4999999999999997", "-5000000000000001", "-9999999999999998");
    checkReg("-1", "-5000000000000001", "-5000000000000000");
    checkReg("0", "-5000000000000001", "-5000000000000001");
    checkReg("-2", "-5000000000000001", "-4999999999999999");
    checkReg("-14999999999999998", "-4999999999999999", "9999999999999999");
    checkReg("-14999999999999997", "-4999999999999999", "9999999999999998");
    checkReg("-9999999999999999", "-4999999999999999", "5000000000000000");
    checkReg("-10000000000000000", "-4999999999999999", "5000000000000001");
    checkReg("-9999999999999998", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "0");
    checkReg("-5000000000000000", "-4999999999999999", "1");
    checkReg("-4999999999999998", "-4999999999999999", "-1");
    checkReg("5000000000000000", "-4999999999999999", "-9999999999999999");
    checkReg("4999999999999999", "-4999999999999999", "-9999999999999998");
    checkReg("1", "-4999999999999999", "-5000000000000000");
    checkReg("2", "-4999999999999999", "-5000000000000001");
    checkReg("0", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void testMultiply() {
    calc.setOperation("Ã—");

    //Integer
    checkReg("99999999999999980000000000000001", "9999999999999999", "9999999999999999");
    checkReg("99999999999999970000000000000002", "9999999999999999", "9999999999999998");
    checkReg("49999999999999995000000000000000", "9999999999999999", "5000000000000000");
    checkReg("50000000000000004999999999999999", "9999999999999999", "5000000000000001");
    checkReg("49999999999999985000000000000001", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "1");
    checkReg("-9999999999999999", "9999999999999999", "-1");
    checkReg("-99999999999999980000000000000001", "9999999999999999", "-9999999999999999");
    checkReg("-99999999999999970000000000000002", "9999999999999999", "-9999999999999998");
    checkReg("-49999999999999995000000000000000", "9999999999999999", "-5000000000000000");
    checkReg("-50000000000000004999999999999999", "9999999999999999", "-5000000000000001");
    checkReg("-49999999999999985000000000000001", "9999999999999999", "-4999999999999999");
    checkReg("99999999999999970000000000000002", "9999999999999998", "9999999999999999");
    checkReg("99999999999999960000000000000004", "9999999999999998", "9999999999999998");
    checkReg("49999999999999990000000000000000", "9999999999999998", "5000000000000000");
    checkReg("49999999999999999999999999999998", "9999999999999998", "5000000000000001");
    checkReg("49999999999999980000000000000002", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "1");
    checkReg("-9999999999999998", "9999999999999998", "-1");
    checkReg("-99999999999999970000000000000002", "9999999999999998", "-9999999999999999");
    checkReg("-99999999999999960000000000000004", "9999999999999998", "-9999999999999998");
    checkReg("-49999999999999990000000000000000", "9999999999999998", "-5000000000000000");
    checkReg("-49999999999999999999999999999998", "9999999999999998", "-5000000000000001");
    checkReg("-49999999999999980000000000000002", "9999999999999998", "-4999999999999999");
    checkReg("49999999999999995000000000000000", "5000000000000000", "9999999999999999");
    checkReg("49999999999999990000000000000000", "5000000000000000", "9999999999999998");
    checkReg("25000000000000000000000000000000", "5000000000000000", "5000000000000000");
    checkReg("25000000000000005000000000000000", "5000000000000000", "5000000000000001");
    checkReg("24999999999999995000000000000000", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "1");
    checkReg("-5000000000000000", "5000000000000000", "-1");
    checkReg("-49999999999999995000000000000000", "5000000000000000", "-9999999999999999");
    checkReg("-49999999999999990000000000000000", "5000000000000000", "-9999999999999998");
    checkReg("-25000000000000000000000000000000", "5000000000000000", "-5000000000000000");
    checkReg("-25000000000000005000000000000000", "5000000000000000", "-5000000000000001");
    checkReg("-24999999999999995000000000000000", "5000000000000000", "-4999999999999999");
    checkReg("50000000000000004999999999999999", "5000000000000001", "9999999999999999");
    checkReg("49999999999999999999999999999998", "5000000000000001", "9999999999999998");
    checkReg("25000000000000005000000000000000", "5000000000000001", "5000000000000000");
    checkReg("25000000000000010000000000000001", "5000000000000001", "5000000000000001");
    checkReg("24999999999999999999999999999999", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "1");
    checkReg("-5000000000000001", "5000000000000001", "-1");
    checkReg("-50000000000000004999999999999999", "5000000000000001", "-9999999999999999");
    checkReg("-49999999999999999999999999999998", "5000000000000001", "-9999999999999998");
    checkReg("-25000000000000005000000000000000", "5000000000000001", "-5000000000000000");
    checkReg("-25000000000000010000000000000001", "5000000000000001", "-5000000000000001");
    checkReg("-24999999999999999999999999999999", "5000000000000001", "-4999999999999999");
    checkReg("49999999999999985000000000000001", "4999999999999999", "9999999999999999");
    checkReg("49999999999999980000000000000002", "4999999999999999", "9999999999999998");
    checkReg("24999999999999995000000000000000", "4999999999999999", "5000000000000000");
    checkReg("24999999999999999999999999999999", "4999999999999999", "5000000000000001");
    checkReg("24999999999999990000000000000001", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "1");
    checkReg("-4999999999999999", "4999999999999999", "-1");
    checkReg("-49999999999999985000000000000001", "4999999999999999", "-9999999999999999");
    checkReg("-49999999999999980000000000000002", "4999999999999999", "-9999999999999998");
    checkReg("-24999999999999995000000000000000", "4999999999999999", "-5000000000000000");
    checkReg("-24999999999999999999999999999999", "4999999999999999", "-5000000000000001");
    checkReg("-24999999999999990000000000000001", "4999999999999999", "-4999999999999999");
    checkReg("0", "0", "9999999999999999");
    checkReg("0", "0", "9999999999999998");
    checkReg("0", "0", "5000000000000000");
    checkReg("0", "0", "5000000000000001");
    checkReg("0", "0", "4999999999999999");
    checkReg("0", "0", "1");
    checkReg("0", "0", "-1");
    checkReg("0", "0", "-9999999999999999");
    checkReg("0", "0", "-9999999999999998");
    checkReg("0", "0", "-5000000000000000");
    checkReg("0", "0", "-5000000000000001");
    checkReg("0", "0", "-4999999999999999");
    checkReg("9999999999999999", "1", "9999999999999999");
    checkReg("9999999999999998", "1", "9999999999999998");
    checkReg("5000000000000000", "1", "5000000000000000");
    checkReg("5000000000000001", "1", "5000000000000001");
    checkReg("4999999999999999", "1", "4999999999999999");
    checkReg("1", "1", "1");
    checkReg("-1", "1", "-1");
    checkReg("-9999999999999999", "1", "-9999999999999999");
    checkReg("-9999999999999998", "1", "-9999999999999998");
    checkReg("-5000000000000000", "1", "-5000000000000000");
    checkReg("-5000000000000001", "1", "-5000000000000001");
    checkReg("-4999999999999999", "1", "-4999999999999999");
    checkReg("-9999999999999999", "-1", "9999999999999999");
    checkReg("-9999999999999998", "-1", "9999999999999998");
    checkReg("-5000000000000000", "-1", "5000000000000000");
    checkReg("-5000000000000001", "-1", "5000000000000001");
    checkReg("-4999999999999999", "-1", "4999999999999999");
    checkReg("-1", "-1", "1");
    checkReg("1", "-1", "-1");
    checkReg("9999999999999999", "-1", "-9999999999999999");
    checkReg("9999999999999998", "-1", "-9999999999999998");
    checkReg("5000000000000000", "-1", "-5000000000000000");
    checkReg("5000000000000001", "-1", "-5000000000000001");
    checkReg("4999999999999999", "-1", "-4999999999999999");
    checkReg("-99999999999999980000000000000001", "-9999999999999999", "9999999999999999");
    checkReg("-99999999999999970000000000000002", "-9999999999999999", "9999999999999998");
    checkReg("-49999999999999995000000000000000", "-9999999999999999", "5000000000000000");
    checkReg("-50000000000000004999999999999999", "-9999999999999999", "5000000000000001");
    checkReg("-49999999999999985000000000000001", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "1");
    checkReg("9999999999999999", "-9999999999999999", "-1");
    checkReg("99999999999999980000000000000001", "-9999999999999999", "-9999999999999999");
    checkReg("99999999999999970000000000000002", "-9999999999999999", "-9999999999999998");
    checkReg("49999999999999995000000000000000", "-9999999999999999", "-5000000000000000");
    checkReg("50000000000000004999999999999999", "-9999999999999999", "-5000000000000001");
    checkReg("49999999999999985000000000000001", "-9999999999999999", "-4999999999999999");
    checkReg("-99999999999999970000000000000002", "-9999999999999998", "9999999999999999");
    checkReg("-99999999999999960000000000000004", "-9999999999999998", "9999999999999998");
    checkReg("-49999999999999990000000000000000", "-9999999999999998", "5000000000000000");
    checkReg("-49999999999999999999999999999998", "-9999999999999998", "5000000000000001");
    checkReg("-49999999999999980000000000000002", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "1");
    checkReg("9999999999999998", "-9999999999999998", "-1");
    checkReg("99999999999999970000000000000002", "-9999999999999998", "-9999999999999999");
    checkReg("99999999999999960000000000000004", "-9999999999999998", "-9999999999999998");
    checkReg("49999999999999990000000000000000", "-9999999999999998", "-5000000000000000");
    checkReg("49999999999999999999999999999998", "-9999999999999998", "-5000000000000001");
    checkReg("49999999999999980000000000000002", "-9999999999999998", "-4999999999999999");
    checkReg("-49999999999999995000000000000000", "-5000000000000000", "9999999999999999");
    checkReg("-49999999999999990000000000000000", "-5000000000000000", "9999999999999998");
    checkReg("-25000000000000000000000000000000", "-5000000000000000", "5000000000000000");
    checkReg("-25000000000000005000000000000000", "-5000000000000000", "5000000000000001");
    checkReg("-24999999999999995000000000000000", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "1");
    checkReg("5000000000000000", "-5000000000000000", "-1");
    checkReg("49999999999999995000000000000000", "-5000000000000000", "-9999999999999999");
    checkReg("49999999999999990000000000000000", "-5000000000000000", "-9999999999999998");
    checkReg("25000000000000000000000000000000", "-5000000000000000", "-5000000000000000");
    checkReg("25000000000000005000000000000000", "-5000000000000000", "-5000000000000001");
    checkReg("24999999999999995000000000000000", "-5000000000000000", "-4999999999999999");
    checkReg("-50000000000000004999999999999999", "-5000000000000001", "9999999999999999");
    checkReg("-49999999999999999999999999999998", "-5000000000000001", "9999999999999998");
    checkReg("-25000000000000005000000000000000", "-5000000000000001", "5000000000000000");
    checkReg("-25000000000000010000000000000001", "-5000000000000001", "5000000000000001");
    checkReg("-24999999999999999999999999999999", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "1");
    checkReg("5000000000000001", "-5000000000000001", "-1");
    checkReg("50000000000000004999999999999999", "-5000000000000001", "-9999999999999999");
    checkReg("49999999999999999999999999999998", "-5000000000000001", "-9999999999999998");
    checkReg("25000000000000005000000000000000", "-5000000000000001", "-5000000000000000");
    checkReg("25000000000000010000000000000001", "-5000000000000001", "-5000000000000001");
    checkReg("24999999999999999999999999999999", "-5000000000000001", "-4999999999999999");
    checkReg("-49999999999999985000000000000001", "-4999999999999999", "9999999999999999");
    checkReg("-49999999999999980000000000000002", "-4999999999999999", "9999999999999998");
    checkReg("-24999999999999995000000000000000", "-4999999999999999", "5000000000000000");
    checkReg("-24999999999999999999999999999999", "-4999999999999999", "5000000000000001");
    checkReg("-24999999999999990000000000000001", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "1");
    checkReg("4999999999999999", "-4999999999999999", "-1");
    checkReg("49999999999999985000000000000001", "-4999999999999999", "-9999999999999999");
    checkReg("49999999999999980000000000000002", "-4999999999999999", "-9999999999999998");
    checkReg("24999999999999995000000000000000", "-4999999999999999", "-5000000000000000");
    checkReg("24999999999999999999999999999999", "-4999999999999999", "-5000000000000001");
    checkReg("24999999999999990000000000000001", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void testDivide() {
    calc.setOperation("Ã·");

    //Integer
    checkReg("1", "9999999999999999", "9999999999999999");
    checkReg("1.0000000000000001", "9999999999999999", "9999999999999998");
    checkReg("1.9999999999999998", "9999999999999999", "5000000000000000");
    checkReg("1.9999999999999994000000000000001", "9999999999999999", "5000000000000001");
    checkReg("2.0000000000000002", "9999999999999999", "4999999999999999");
    checkReg("9999999999999999", "9999999999999999", "1");
    checkReg("-9999999999999999", "9999999999999999", "-1");
    checkReg("-1", "9999999999999999", "-9999999999999999");
    checkReg("-1.0000000000000001", "9999999999999999", "-9999999999999998");
    checkReg("-1.9999999999999998", "9999999999999999", "-5000000000000000");
    checkReg("-1.9999999999999994", "9999999999999999", "-5000000000000001");
    checkReg("-2.0000000000000002", "9999999999999999", "-4999999999999999");
    checkReg("0.9999999999999999", "9999999999999998", "9999999999999999");
    checkReg("1", "9999999999999998", "9999999999999998");
    checkReg("1.9999999999999996", "9999999999999998", "5000000000000000");
    checkReg("1.9999999999999992000000000000002", "9999999999999998", "5000000000000001");
    checkReg("2", "9999999999999998", "4999999999999999");
    checkReg("9999999999999998", "9999999999999998", "1");
    checkReg("-9999999999999998", "9999999999999998", "-1");
    checkReg("-0.9999999999999999", "9999999999999998", "-9999999999999999");
    checkReg("-1", "9999999999999998", "-9999999999999998");
    checkReg("-1.9999999999999996", "9999999999999998", "-5000000000000000");
    checkReg("-1.9999999999999992", "9999999999999998", "-5000000000000001");
    checkReg("-2", "9999999999999998", "-4999999999999999");
    checkReg("0.50000000000000005", "5000000000000000", "9999999999999999");
    checkReg("0.5000000000000001", "5000000000000000", "9999999999999998");
    checkReg("1", "5000000000000000", "5000000000000000");
    checkReg("0.9999999999999998", "5000000000000000", "5000000000000001");
    checkReg("1.0000000000000002", "5000000000000000", "4999999999999999");
    checkReg("5000000000000000", "5000000000000000", "1");
    checkReg("-5000000000000000", "5000000000000000", "-1");
    checkReg("-0.50000000000000005", "5000000000000000", "-9999999999999999");
    checkReg("-0.5000000000000001", "5000000000000000", "-9999999999999998");
    checkReg("-1", "5000000000000000", "-5000000000000000");
    checkReg("-0.9999999999999998", "5000000000000000", "-5000000000000001");
    checkReg("-1.0000000000000002", "5000000000000000", "-4999999999999999");
    checkReg("0.50000000000000015", "5000000000000001", "9999999999999999");
    checkReg("0.5000000000000002", "5000000000000001", "9999999999999998");
    checkReg("1.0000000000000002", "5000000000000001", "5000000000000000");
    checkReg("1", "5000000000000001", "5000000000000001");
    checkReg("1.0000000000000004000000000000001", "5000000000000001", "4999999999999999");
    checkReg("5000000000000001", "5000000000000001", "1");
    checkReg("-5000000000000001", "5000000000000001", "-1");
    checkReg("-0.50000000000000015", "5000000000000001", "-9999999999999999");
    checkReg("-0.5000000000000002", "5000000000000001", "-9999999999999998");
    checkReg("-1.0000000000000002", "5000000000000001", "-5000000000000000");
    checkReg("-1", "5000000000000001", "-5000000000000001");
    checkReg("-1.0000000000000004", "5000000000000001", "-4999999999999999");
    checkReg("0.49999999999999995", "4999999999999999", "9999999999999999");
    checkReg("0.5", "4999999999999999", "9999999999999998");
    checkReg("0.9999999999999998", "4999999999999999", "5000000000000000");
    checkReg("0.9999999999999996000000000000001", "4999999999999999", "5000000000000001");
    checkReg("1", "4999999999999999", "4999999999999999");
    checkReg("4999999999999999", "4999999999999999", "1");
    checkReg("-4999999999999999", "4999999999999999", "-1");
    checkReg("-0.49999999999999995", "4999999999999999", "-9999999999999999");
    checkReg("-0.5", "4999999999999999", "-9999999999999998");
    checkReg("-0.9999999999999998", "4999999999999999", "-5000000000000000");
    checkReg("-0.9999999999999996", "4999999999999999", "-5000000000000001");
    checkReg("-1", "4999999999999999", "-4999999999999999");
    checkReg("0", "0", "9999999999999999");
    checkReg("0", "0", "9999999999999998");
    checkReg("0", "0", "5000000000000000");
    checkReg("0", "0", "5000000000000001");
    checkReg("0", "0", "4999999999999999");
    checkReg("0", "0", "1");
    checkReg("0", "0", "-1");
    checkReg("0", "0", "-9999999999999999");
    checkReg("0", "0", "-9999999999999998");
    checkReg("0", "0", "-5000000000000000");
    checkReg("0", "0", "-5000000000000001");
    checkReg("0", "0", "-4999999999999999");
    checkReg("1E-16", "1", "9999999999999999");
    checkReg("1E-16", "1", "9999999999999998");
    checkReg("2E-16", "1", "5000000000000000");
    checkReg("2E-16", "1", "5000000000000001");
    checkReg("2E-16", "1", "4999999999999999");
    checkReg("1", "1", "1");
    checkReg("-1", "1", "-1");
    checkReg("-1E-16", "1", "-9999999999999999");
    checkReg("-1E-16", "1", "-9999999999999998");
    checkReg("-2E-16", "1", "-5000000000000000");
    checkReg("-2E-16", "1", "-5000000000000001");
    checkReg("-2E-16", "1", "-4999999999999999");
    checkReg("-1E-16", "-1", "9999999999999999");
    checkReg("-1E-16", "-1", "9999999999999998");
    checkReg("-2E-16", "-1", "5000000000000000");
    checkReg("-2E-16", "-1", "5000000000000001");
    checkReg("-2E-16", "-1", "4999999999999999");
    checkReg("-1", "-1", "1");
    checkReg("1", "-1", "-1");
    checkReg("1E-16", "-1", "-9999999999999999");
    checkReg("1E-16", "-1", "-9999999999999998");
    checkReg("2E-16", "-1", "-5000000000000000");
    checkReg("2E-16", "-1", "-5000000000000001");
    checkReg("2E-16", "-1", "-4999999999999999");
    checkReg("-1", "-9999999999999999", "9999999999999999");
    checkReg("-1.0000000000000001", "-9999999999999999", "9999999999999998");
    checkReg("-1.9999999999999998", "-9999999999999999", "5000000000000000");
    checkReg("-1.9999999999999994", "-9999999999999999", "5000000000000001");
    checkReg("-2.0000000000000002", "-9999999999999999", "4999999999999999");
    checkReg("-9999999999999999", "-9999999999999999", "1");
    checkReg("9999999999999999", "-9999999999999999", "-1");
    checkReg("1", "-9999999999999999", "-9999999999999999");
    checkReg("1.0000000000000001", "-9999999999999999", "-9999999999999998");
    checkReg("1.9999999999999998", "-9999999999999999", "-5000000000000000");
    checkReg("1.9999999999999994000000000000001", "-9999999999999999", "-5000000000000001");
    checkReg("2.0000000000000002", "-9999999999999999", "-4999999999999999");
    checkReg("-0.9999999999999999", "-9999999999999998", "9999999999999999");
    checkReg("-1", "-9999999999999998", "9999999999999998");
    checkReg("-1.9999999999999996", "-9999999999999998", "5000000000000000");
    checkReg("-1.9999999999999992", "-9999999999999998", "5000000000000001");
    checkReg("-2", "-9999999999999998", "4999999999999999");
    checkReg("-9999999999999998", "-9999999999999998", "1");
    checkReg("9999999999999998", "-9999999999999998", "-1");
    checkReg("0.9999999999999999", "-9999999999999998", "-9999999999999999");
    checkReg("1", "-9999999999999998", "-9999999999999998");
    checkReg("1.9999999999999996", "-9999999999999998", "-5000000000000000");
    checkReg("1.9999999999999992000000000000002", "-9999999999999998", "-5000000000000001");
    checkReg("2", "-9999999999999998", "-4999999999999999");
    checkReg("-0.50000000000000005", "-5000000000000000", "9999999999999999");
    checkReg("-0.5000000000000001", "-5000000000000000", "9999999999999998");
    checkReg("-1", "-5000000000000000", "5000000000000000");
    checkReg("-0.9999999999999998", "-5000000000000000", "5000000000000001");
    checkReg("-1.0000000000000002", "-5000000000000000", "4999999999999999");
    checkReg("-5000000000000000", "-5000000000000000", "1");
    checkReg("5000000000000000", "-5000000000000000", "-1");
    checkReg("0.50000000000000005", "-5000000000000000", "-9999999999999999");
    checkReg("0.5000000000000001", "-5000000000000000", "-9999999999999998");
    checkReg("1", "-5000000000000000", "-5000000000000000");
    checkReg("0.9999999999999998", "-5000000000000000", "-5000000000000001");
    checkReg("1.0000000000000002", "-5000000000000000", "-4999999999999999");
    checkReg("-0.50000000000000015", "-5000000000000001", "9999999999999999");
    checkReg("-0.5000000000000002", "-5000000000000001", "9999999999999998");
    checkReg("-1.0000000000000002", "-5000000000000001", "5000000000000000");
    checkReg("-1", "-5000000000000001", "5000000000000001");
    checkReg("-1.0000000000000004", "-5000000000000001", "4999999999999999");
    checkReg("-5000000000000001", "-5000000000000001", "1");
    checkReg("5000000000000001", "-5000000000000001", "-1");
    checkReg("0.50000000000000015", "-5000000000000001", "-9999999999999999");
    checkReg("0.5000000000000002", "-5000000000000001", "-9999999999999998");
    checkReg("1.0000000000000002", "-5000000000000001", "-5000000000000000");
    checkReg("1", "-5000000000000001", "-5000000000000001");
    checkReg("1.0000000000000004000000000000001", "-5000000000000001", "-4999999999999999");
    checkReg("-0.49999999999999995", "-4999999999999999", "9999999999999999");
    checkReg("-0.5", "-4999999999999999", "9999999999999998");
    checkReg("-0.9999999999999998", "-4999999999999999", "5000000000000000");
    checkReg("-0.9999999999999996", "-4999999999999999", "5000000000000001");
    checkReg("-1", "-4999999999999999", "4999999999999999");
    checkReg("-4999999999999999", "-4999999999999999", "1");
    checkReg("4999999999999999", "-4999999999999999", "-1");
    checkReg("0.49999999999999995", "-4999999999999999", "-9999999999999999");
    checkReg("0.5", "-4999999999999999", "-9999999999999998");
    checkReg("0.9999999999999998", "-4999999999999999", "-5000000000000000");
    checkReg("0.9999999999999996000000000000001", "-4999999999999999", "-5000000000000001");
    checkReg("1", "-4999999999999999", "-4999999999999999");

    //todo: Float point
  }

  @Test
  void reverseTest() {
    checkUnary("1E-16", "9999999999999999", REVERSE);
    checkUnary("1E-16", "9999999999999998", REVERSE);
    checkUnary("2E-16", "5000000000000000", REVERSE);
    checkUnary("2E-16", "5000000000000001", REVERSE);
    checkUnary("1", "1", REVERSE);
    checkUnary("-1", "-1", REVERSE);
    checkUnary("-1E-16", "-9999999999999999", REVERSE);
    checkUnary("-1E-16", "-9999999999999998", REVERSE);
    checkUnary("-2E-16", "-5000000000000000", REVERSE);
    checkUnary("-2E-16", "-5000000000000001", REVERSE);
    checkUnary("-2E-16", "-4999999999999999", REVERSE);

    //todo: Float val
  }

  @Test
  void powTest() {
    //Integer
    checkUnary("99999999999999980000000000000001", "9999999999999999", POW);
    checkUnary("99999999999999960000000000000004", "9999999999999998", POW);
    checkUnary("25000000000000000000000000000000", "5000000000000000", POW);
    checkUnary("25000000000000010000000000000001", "5000000000000001", POW);
    checkUnary("24999999999999990000000000000001", "4999999999999999", POW);
    checkUnary("0", "0", POW);
    checkUnary("1", "1", POW);
    checkUnary("1", "-1", POW);
    checkUnary("99999999999999980000000000000001", "-9999999999999999", POW);
    checkUnary("99999999999999960000000000000004", "-9999999999999998", POW);
    checkUnary("25000000000000000000000000000000", "-5000000000000000", POW);
    checkUnary("25000000000000010000000000000001", "-5000000000000001", POW);
    checkUnary("24999999999999990000000000000001", "-4999999999999999", POW);


    //todo: Float
  }

  @Test
  void negateTest() {
    //Integer
    checkUnary("-9999999999999999", "9999999999999999", NEGATE);
    checkUnary("-9999999999999998", "9999999999999998", NEGATE);
    checkUnary("-5000000000000000", "5000000000000000", NEGATE);
    checkUnary("-5000000000000001", "5000000000000001", NEGATE);
    checkUnary("-4999999999999999", "4999999999999999", NEGATE);
    checkUnary("0", "0", NEGATE);
    checkUnary("-1", "1", NEGATE);
    checkUnary("1", "-1", NEGATE);
    checkUnary("1", "-1", NEGATE);
    checkUnary("9999999999999999", "-9999999999999999", NEGATE);
    checkUnary("9999999999999998", "-9999999999999998", NEGATE);
    checkUnary("5000000000000000", "-5000000000000000", NEGATE);
    checkUnary("5000000000000001", "-5000000000000001", NEGATE);
    checkUnary("4999999999999999", "-4999999999999999", NEGATE);

    //todo: Float
  }

  @Test
  void sqrtTest() {
    //Integer
    checkUnary("99999999.999999995", "9999999999999999", SQRT);
    checkUnary("99999999.99999999", "9999999999999998", SQRT);
    checkUnary("70710678.118654752440084436210485", "5000000000000000", SQRT);
    checkUnary("70710678.11865475951115224807596", "5000000000000001", SQRT);
    checkUnary("70710678.118654745369016624345009", "4999999999999999", SQRT);
    checkUnary("0", "0", SQRT);
    checkUnary("1", "1", SQRT);

    //todo: Float
  }

  @Test
  void percentTest() {
    //Integer
    checkPercentPlus("0.01", "1", "1");
    checkPercentPlus("0", "1", "0");
    checkPercentPlus("-0.01", "1", "-1");
    checkPercentPlus("99999999999999.99", "1", "9999999999999999");
    checkPercentPlus("99999999999999.98", "1", "9999999999999998");
    checkPercentPlus("50000000000000", "1", "5000000000000000");
    checkPercentPlus("50000000000000.01", "1", "5000000000000001");
    checkPercentPlus("49999999999999.99", "1", "4999999999999999");
    checkPercentPlus("-99999999999999.99", "1", "-9999999999999999");
    checkPercentPlus("-99999999999999.98", "1", "-9999999999999998");
    checkPercentPlus("-50000000000000", "1", "-5000000000000000");
    checkPercentPlus("-50000000000000.01", "1", "-5000000000000001");
    checkPercentPlus("-49999999999999.99", "1", "-4999999999999999");
    checkPercentPlus("0", "0", "1");
    checkPercentPlus("0", "0", "0");
    checkPercentPlus("0", "0", "-1");
    checkPercentPlus("0", "0", "9999999999999999");
    checkPercentPlus("0", "0", "9999999999999998");
    checkPercentPlus("0", "0", "5000000000000000");
    checkPercentPlus("0", "0", "5000000000000001");
    checkPercentPlus("0", "0", "4999999999999999");
    checkPercentPlus("0", "0", "-9999999999999999");
    checkPercentPlus("0", "0", "-9999999999999998");
    checkPercentPlus("0", "0", "-5000000000000000");
    checkPercentPlus("0", "0", "-5000000000000001");
    checkPercentPlus("0", "0", "-4999999999999999");
    checkPercentPlus("-0.01", "-1", "1");
    checkPercentPlus("0", "-1", "0");
    checkPercentPlus("0.01", "-1", "-1");
    checkPercentPlus("-99999999999999.99", "-1", "9999999999999999");
    checkPercentPlus("-99999999999999.98", "-1", "9999999999999998");
    checkPercentPlus("-50000000000000", "-1", "5000000000000000");
    checkPercentPlus("-50000000000000.01", "-1", "5000000000000001");
    checkPercentPlus("-49999999999999.99", "-1", "4999999999999999");
    checkPercentPlus("99999999999999.99", "-1", "-9999999999999999");
    checkPercentPlus("99999999999999.98", "-1", "-9999999999999998");
    checkPercentPlus("50000000000000", "-1", "-5000000000000000");
    checkPercentPlus("50000000000000.01", "-1", "-5000000000000001");
    checkPercentPlus("49999999999999.99", "-1", "-4999999999999999");
    checkPercentPlus("99999999999999.99", "9999999999999999", "1");
    checkPercentPlus("0", "9999999999999999", "0");
    checkPercentPlus("-99999999999999.99", "9999999999999999", "-1");
    checkPercentPlus("999999999999999800000000000000.01", "9999999999999999", "9999999999999999");
    checkPercentPlus("999999999999999700000000000000.02", "9999999999999999", "9999999999999998");
    checkPercentPlus("499999999999999950000000000000", "9999999999999999", "5000000000000000");
    checkPercentPlus("500000000000000049999999999999.99", "9999999999999999", "5000000000000001");
    checkPercentPlus("499999999999999850000000000000.01", "9999999999999999", "4999999999999999");
    checkPercentPlus("-999999999999999800000000000000", "9999999999999999", "-9999999999999999");
    checkPercentPlus("-999999999999999700000000000000", "9999999999999999", "-9999999999999998");
    checkPercentPlus("-499999999999999950000000000000", "9999999999999999", "-5000000000000000");
    checkPercentPlus("-500000000000000050000000000000", "9999999999999999", "-5000000000000001");
    checkPercentPlus("-499999999999999850000000000000", "9999999999999999", "-4999999999999999");
    checkPercentPlus("99999999999999.98", "9999999999999998", "1");
    checkPercentPlus("0", "9999999999999998", "0");
    checkPercentPlus("-99999999999999.98", "9999999999999998", "-1");
    checkPercentPlus("999999999999999700000000000000.02", "9999999999999998", "9999999999999999");
    checkPercentPlus("999999999999999600000000000000.04", "9999999999999998", "9999999999999998");
    checkPercentPlus("499999999999999900000000000000", "9999999999999998", "5000000000000000");
    checkPercentPlus("499999999999999999999999999999.98", "9999999999999998", "5000000000000001");
    checkPercentPlus("499999999999999800000000000000.02", "9999999999999998", "4999999999999999");
    checkPercentPlus("-999999999999999700000000000000", "9999999999999998", "-9999999999999999");
    checkPercentPlus("-999999999999999600000000000000", "9999999999999998", "-9999999999999998");
    checkPercentPlus("-499999999999999900000000000000", "9999999999999998", "-5000000000000000");
    checkPercentPlus("-500000000000000000000000000000", "9999999999999998", "-5000000000000001");
    checkPercentPlus("-499999999999999800000000000000", "9999999999999998", "-4999999999999999");
    checkPercentPlus("50000000000000", "5000000000000000", "1");
    checkPercentPlus("0", "5000000000000000", "0");
    checkPercentPlus("-50000000000000", "5000000000000000", "-1");
    checkPercentPlus("499999999999999950000000000000", "5000000000000000", "9999999999999999");
    checkPercentPlus("499999999999999900000000000000", "5000000000000000", "9999999999999998");
    checkPercentPlus("250000000000000000000000000000", "5000000000000000", "5000000000000000");
    checkPercentPlus("250000000000000050000000000000", "5000000000000000", "5000000000000001");
    checkPercentPlus("249999999999999950000000000000", "5000000000000000", "4999999999999999");
    checkPercentPlus("-499999999999999950000000000000", "5000000000000000", "-9999999999999999");
    checkPercentPlus("-499999999999999900000000000000", "5000000000000000", "-9999999999999998");
    checkPercentPlus("-250000000000000000000000000000", "5000000000000000", "-5000000000000000");
    checkPercentPlus("-250000000000000050000000000000", "5000000000000000", "-5000000000000001");
    checkPercentPlus("-249999999999999950000000000000", "5000000000000000", "-4999999999999999");
    checkPercentPlus("50000000000000.01", "5000000000000001", "1");
    checkPercentPlus("0", "5000000000000001", "0");
    checkPercentPlus("-50000000000000.01", "5000000000000001", "-1");
    checkPercentPlus("500000000000000049999999999999.99", "5000000000000001", "9999999999999999");
    checkPercentPlus("499999999999999999999999999999.98", "5000000000000001", "9999999999999998");
    checkPercentPlus("250000000000000050000000000000", "5000000000000001", "5000000000000000");
    checkPercentPlus("250000000000000100000000000000.01", "5000000000000001", "5000000000000001");
    checkPercentPlus("249999999999999999999999999999.99", "5000000000000001", "4999999999999999");
    checkPercentPlus("-500000000000000050000000000000", "5000000000000001", "-9999999999999999");
    checkPercentPlus("-500000000000000000000000000000", "5000000000000001", "-9999999999999998");
    checkPercentPlus("-250000000000000050000000000000", "5000000000000001", "-5000000000000000");
    checkPercentPlus("-250000000000000100000000000000", "5000000000000001", "-5000000000000001");
    checkPercentPlus("-250000000000000000000000000000", "5000000000000001", "-4999999999999999");
    checkPercentPlus("49999999999999.99", "4999999999999999", "1");
    checkPercentPlus("0", "4999999999999999", "0");
    checkPercentPlus("-49999999999999.99", "4999999999999999", "-1");
    checkPercentPlus("499999999999999850000000000000.01", "4999999999999999", "9999999999999999");
    checkPercentPlus("499999999999999800000000000000.02", "4999999999999999", "9999999999999998");
    checkPercentPlus("249999999999999950000000000000", "4999999999999999", "5000000000000000");
    checkPercentPlus("249999999999999999999999999999.99", "4999999999999999", "5000000000000001");
    checkPercentPlus("249999999999999900000000000000.01", "4999999999999999", "4999999999999999");
    checkPercentPlus("-499999999999999850000000000000", "4999999999999999", "-9999999999999999");
    checkPercentPlus("-499999999999999800000000000000", "4999999999999999", "-9999999999999998");
    checkPercentPlus("-249999999999999950000000000000", "4999999999999999", "-5000000000000000");
    checkPercentPlus("-250000000000000000000000000000", "4999999999999999", "-5000000000000001");
    checkPercentPlus("-249999999999999900000000000000", "4999999999999999", "-4999999999999999");
    checkPercentPlus("-99999999999999.99", "-9999999999999999", "1");
    checkPercentPlus("0", "-9999999999999999", "0");
    checkPercentPlus("99999999999999.99", "-9999999999999999", "-1");
    checkPercentPlus("-999999999999999800000000000000", "-9999999999999999", "9999999999999999");
    checkPercentPlus("-999999999999999700000000000000", "-9999999999999999", "9999999999999998");
    checkPercentPlus("-499999999999999950000000000000", "-9999999999999999", "5000000000000000");
    checkPercentPlus("-500000000000000050000000000000", "-9999999999999999", "5000000000000001");
    checkPercentPlus("-499999999999999850000000000000", "-9999999999999999", "4999999999999999");
    checkPercentPlus("999999999999999800000000000000.01", "-9999999999999999", "-9999999999999999");
    checkPercentPlus("999999999999999700000000000000.02", "-9999999999999999", "-9999999999999998");
    checkPercentPlus("499999999999999950000000000000", "-9999999999999999", "-5000000000000000");
    checkPercentPlus("500000000000000049999999999999.99", "-9999999999999999", "-5000000000000001");
    checkPercentPlus("499999999999999850000000000000.01", "-9999999999999999", "-4999999999999999");
    checkPercentPlus("-99999999999999.98", "-9999999999999998", "1");
    checkPercentPlus("0", "-9999999999999998", "0");
    checkPercentPlus("99999999999999.98", "-9999999999999998", "-1");
    checkPercentPlus("-999999999999999700000000000000", "-9999999999999998", "9999999999999999");
    checkPercentPlus("-999999999999999600000000000000", "-9999999999999998", "9999999999999998");
    checkPercentPlus("-499999999999999900000000000000", "-9999999999999998", "5000000000000000");
    checkPercentPlus("-500000000000000000000000000000", "-9999999999999998", "5000000000000001");
    checkPercentPlus("-499999999999999800000000000000", "-9999999999999998", "4999999999999999");
    checkPercentPlus("999999999999999700000000000000.02", "-9999999999999998", "-9999999999999999");
    checkPercentPlus("999999999999999600000000000000.04", "-9999999999999998", "-9999999999999998");
    checkPercentPlus("499999999999999900000000000000", "-9999999999999998", "-5000000000000000");
    checkPercentPlus("499999999999999999999999999999.98", "-9999999999999998", "-5000000000000001");
    checkPercentPlus("499999999999999800000000000000.02", "-9999999999999998", "-4999999999999999");
    checkPercentPlus("-50000000000000", "-5000000000000000", "1");
    checkPercentPlus("0", "-5000000000000000", "0");
    checkPercentPlus("50000000000000", "-5000000000000000", "-1");
    checkPercentPlus("-499999999999999950000000000000", "-5000000000000000", "9999999999999999");
    checkPercentPlus("-499999999999999900000000000000", "-5000000000000000", "9999999999999998");
    checkPercentPlus("-250000000000000000000000000000", "-5000000000000000", "5000000000000000");
    checkPercentPlus("-250000000000000050000000000000", "-5000000000000000", "5000000000000001");
    checkPercentPlus("-249999999999999950000000000000", "-5000000000000000", "4999999999999999");
    checkPercentPlus("499999999999999950000000000000", "-5000000000000000", "-9999999999999999");
    checkPercentPlus("499999999999999900000000000000", "-5000000000000000", "-9999999999999998");
    checkPercentPlus("250000000000000000000000000000", "-5000000000000000", "-5000000000000000");
    checkPercentPlus("250000000000000050000000000000", "-5000000000000000", "-5000000000000001");
    checkPercentPlus("249999999999999950000000000000", "-5000000000000000", "-4999999999999999");
    checkPercentPlus("-50000000000000.01", "-5000000000000001", "1");
    checkPercentPlus("0", "-5000000000000001", "0");
    checkPercentPlus("50000000000000.01", "-5000000000000001", "-1");
    checkPercentPlus("-500000000000000050000000000000", "-5000000000000001", "9999999999999999");
    checkPercentPlus("-500000000000000000000000000000", "-5000000000000001", "9999999999999998");
    checkPercentPlus("-250000000000000050000000000000", "-5000000000000001", "5000000000000000");
    checkPercentPlus("-250000000000000100000000000000", "-5000000000000001", "5000000000000001");
    checkPercentPlus("-250000000000000000000000000000", "-5000000000000001", "4999999999999999");
    checkPercentPlus("500000000000000049999999999999.99", "-5000000000000001", "-9999999999999999");
    checkPercentPlus("499999999999999999999999999999.98", "-5000000000000001", "-9999999999999998");
    checkPercentPlus("250000000000000050000000000000", "-5000000000000001", "-5000000000000000");
    checkPercentPlus("250000000000000100000000000000.01", "-5000000000000001", "-5000000000000001");
    checkPercentPlus("249999999999999999999999999999.99", "-5000000000000001", "-4999999999999999");
    checkPercentPlus("-49999999999999.99", "-4999999999999999", "1");
    checkPercentPlus("0", "-4999999999999999", "0");
    checkPercentPlus("49999999999999.99", "-4999999999999999", "-1");
    checkPercentPlus("-499999999999999850000000000000", "-4999999999999999", "9999999999999999");
    checkPercentPlus("-499999999999999800000000000000", "-4999999999999999", "9999999999999998");
    checkPercentPlus("-249999999999999950000000000000", "-4999999999999999", "5000000000000000");
    checkPercentPlus("-250000000000000000000000000000", "-4999999999999999", "5000000000000001");
    checkPercentPlus("-249999999999999900000000000000", "-4999999999999999", "4999999999999999");
    checkPercentPlus("499999999999999850000000000000.01", "-4999999999999999", "-9999999999999999");
    checkPercentPlus("499999999999999800000000000000.02", "-4999999999999999", "-9999999999999998");
    checkPercentPlus("249999999999999950000000000000", "-4999999999999999", "-5000000000000000");
    checkPercentPlus("249999999999999999999999999999.99", "-4999999999999999", "-5000000000000001");
    checkPercentPlus("249999999999999900000000000000.01", "-4999999999999999", "-4999999999999999");


    checkPercentMultiply("0.01", "1");
    checkPercentMultiply("0", "0");
    checkPercentMultiply("-0.01", "-1");
    checkPercentMultiply("99999999999999.99", "9999999999999999");
    checkPercentMultiply("99999999999999.98", "9999999999999998");
    checkPercentMultiply("50000000000000", "5000000000000000");
    checkPercentMultiply("50000000000000.01", "5000000000000001");
    checkPercentMultiply("49999999999999.99", "4999999999999999");
    checkPercentMultiply("-99999999999999.99", "-9999999999999999");
    checkPercentMultiply("-99999999999999.98", "-9999999999999998");
    checkPercentMultiply("-50000000000000", "-5000000000000000");
    checkPercentMultiply("-50000000000000.01", "-5000000000000001");
    checkPercentMultiply("-49999999999999.99", "-4999999999999999");

  }

  @Test
  void memoryClearTest() {
    checkMemoryClear("9999999999999999");
    checkMemoryClear("9999999999999998");
    checkMemoryClear("5000000000000000");
    checkMemoryClear("5000000000000001");
    checkMemoryClear("4999999999999999");
    checkMemoryClear("0");
    checkMemoryClear("1");
    checkMemoryClear("-1");
    checkMemoryClear("-9999999999999999");
    checkMemoryClear("-9999999999999998");
    checkMemoryClear("-5000000000000000");
    checkMemoryClear("-5000000000000001");
    checkMemoryClear("-4999999999999999");
  }

  @Test
  void memoryAddAsMemorySaveTest() {
    checkMemoryAdd(new BigDecimal("9999999999999999"), null, new BigDecimal("9999999999999999"));
    checkMemoryAdd(new BigDecimal("9999999999999998"), null, new BigDecimal("9999999999999998"));
    checkMemoryAdd(new BigDecimal("5000000000000000"), null, new BigDecimal("5000000000000000"));
    checkMemoryAdd(new BigDecimal("5000000000000001"), null, new BigDecimal("5000000000000001"));
    checkMemoryAdd(new BigDecimal("4999999999999999"), null, new BigDecimal("4999999999999999"));
    checkMemoryAdd(new BigDecimal("0"), null, new BigDecimal("0"));
    checkMemoryAdd(new BigDecimal("1"), null, new BigDecimal("1"));
    checkMemoryAdd(new BigDecimal("-1"), null, new BigDecimal("-1"));
    checkMemoryAdd(new BigDecimal("-9999999999999999"), null, new BigDecimal("-9999999999999999"));
    checkMemoryAdd(new BigDecimal("-9999999999999998"), null, new BigDecimal("-9999999999999998"));
    checkMemoryAdd(new BigDecimal("-5000000000000000"), null, new BigDecimal("-5000000000000000"));
    checkMemoryAdd(new BigDecimal("-5000000000000001"), null, new BigDecimal("-5000000000000001"));
    checkMemoryAdd(new BigDecimal("-4999999999999999"), null, new BigDecimal("-4999999999999999"));
  }

  @Test
  void memorySubAsMemorySaveNegateTest() {
    checkMemorySub(new BigDecimal("-9999999999999999"), null, new BigDecimal("9999999999999999"));
    checkMemorySub(new BigDecimal("-9999999999999998"), null, new BigDecimal("9999999999999998"));
    checkMemorySub(new BigDecimal("-5000000000000000"), null, new BigDecimal("5000000000000000"));
    checkMemorySub(new BigDecimal("-5000000000000001"), null, new BigDecimal("5000000000000001"));
    checkMemorySub(new BigDecimal("-4999999999999999"), null, new BigDecimal("4999999999999999"));
    checkMemorySub(new BigDecimal("-0"), null, new BigDecimal("0"));
    checkMemorySub(new BigDecimal("-1"), null, new BigDecimal("1"));
    checkMemorySub(new BigDecimal("1"), null, new BigDecimal("-1"));
    checkMemorySub(new BigDecimal("9999999999999999"), null, new BigDecimal("-9999999999999999"));
    checkMemorySub(new BigDecimal("9999999999999998"), null, new BigDecimal("-9999999999999998"));
    checkMemorySub(new BigDecimal("5000000000000000"), null, new BigDecimal("-5000000000000000"));
    checkMemorySub(new BigDecimal("5000000000000001"), null, new BigDecimal("-5000000000000001"));
    checkMemorySub(new BigDecimal("4999999999999999"), null, new BigDecimal("-4999999999999999"));
  }

  @Test
  void overflowTest() {
    checkThrowBinary(MAX_POS, MIN_POS, "+");
    checkThrowBinary(MAX_POS, MAX_POS, "+");
    checkThrowBinary(MAX_POS, MAX, "+");
    checkThrowBinary(MAX_POS, MIN, "+");
    checkThrowBinary(MAX_POS, BigDecimal.ONE, "+");
    checkThrowBinary(MAX, BigDecimal.ZERO, "+");
    checkThrowBinary(MIN, BigDecimal.ZERO, "-");
    checkThrowBinary(MIN_POS, MIN, "-");
    checkThrowBinary(MIN, BigDecimal.ZERO, "-");
    checkThrowBinary(MIN, BigDecimal.ZERO, "+");

    checkThrowBinary(MAX_POS, BigDecimal.TEN, "Ã—");
    checkThrowBinary(MAX_POS, MAX_POS, "Ã—");
    checkThrowBinary(MAX_POS, MAX, "Ã—");
    checkThrowBinary(MAX, BigDecimal.ONE, "Ã—");
    checkThrowBinary(MIN_POS, BigDecimal.TEN, "Ã·");
    checkThrowBinary(MIN_POS, MAX_POS, "Ã·");
    checkThrowBinary(MIN_POS, MAX, "Ã·");
    checkThrowBinary(MIN, BigDecimal.ONE, "Ã·");


    checkThrowUnary(MAX_POS, POW);
    checkThrowUnary(MIN_POS, POW);

    checkThrowUnary(MIN, REVERSE);
    checkThrowUnary(MAX, REVERSE);


    checkThrowPercent(MIN, BigDecimal.valueOf(99), "+");
    checkThrowPercent(MIN, BigDecimal.ONE, "+");
  }

  @Test
  void cannotDivideByZero() {
    checkThrowBinary(BigDecimal.ZERO, BigDecimal.ZERO, "Ã·"); // Result is

    checkThrowBinary(MAX_POS, BigDecimal.ZERO, "Ã·");
    checkThrowBinary(MAX_POS.divide(BigDecimal.valueOf(2)), BigDecimal.ZERO, "Ã·");
    checkThrowBinary(BigDecimal.ONE, BigDecimal.ZERO, "Ã·");

    checkThrowBinary(MIN_POS, BigDecimal.ZERO, "Ã·");
    checkThrowBinary(MIN_POS.multiply(BigDecimal.valueOf(2)), BigDecimal.ZERO, "Ã·");

    checkThrowUnary(BigDecimal.ZERO, REVERSE);
  }

  @Test
  void invalidInput() {
    checkThrowUnary(MAX_POS.negate(), SQRT);
    checkThrowUnary(MAX_POS.divide(BigDecimal.valueOf(2)).negate(), SQRT);
    checkThrowUnary(MAX_POS.subtract(BigDecimal.valueOf(1)).negate(), SQRT);

    checkThrowUnary(MIN_POS.negate(), SQRT);
    checkThrowUnary(MAX_POS.multiply(BigDecimal.valueOf(2)).negate(), SQRT);
    checkThrowUnary(MAX_POS.add(BigDecimal.valueOf(1)).negate(), SQRT);

    checkThrowUnary(BigDecimal.valueOf(-1), SQRT);
  }

  @BeforeEach
  void before() {
    calc = new CalculatorModel();
  }

  private void checkReg(String expected, String left, String right) {
    calc.setLeftOperand(new BigDecimal(left));
    calc.setRightOperand(new BigDecimal(right));

    String actual = calc.getBinaryOperationResult();

    assertEquals(expected, actual);

    if (calc.getOperation().equals("+")) {
      checkMemoryAdd(new BigDecimal(expected), new BigDecimal(left), new BigDecimal(right));
    }

    if (calc.getOperation().equals("-")) {
      checkMemorySub(new BigDecimal(expected), new BigDecimal(left), new BigDecimal(right));
    }
  }

  private void checkUnary(String expected, String num, String op) {
    String actual = calc.getUnaryOperationResult(op, num);

    assertEquals(expected, actual);
  }

  private void checkPercentPlus(String expected, String left, String right) {
    calc.setOperation("+");
    checkPercent(expected, left, right);
    calc.setOperation("-");
    checkPercent(expected, left, right);
  }

  private void checkPercentMultiply(String expected, String right) {
    calc.setOperation("Ã—");
    checkPercent(expected, "1", right);
    calc.setOperation("Ã·");
    checkPercent(expected, "1", right);
  }

  private void checkPercent(String expected, String left, String right) {
    calc.setLeftOperand(new BigDecimal(left));
    calc.setRightOperand(new BigDecimal(right));

    String actual = calc.getPercentOperation();

    assertEquals(expected, actual);
  }

  private void checkMemoryClear(String num) {
    calc.setMemory(new BigDecimal(num));
    calc.clearMemory();

    assertNull(calc.getMemory());
  }

  private void checkMemoryAdd(BigDecimal expected, BigDecimal memory, BigDecimal num) {
    calc.setMemory(memory);
    calc.memoryAdd(num);

    assertEquals(expected, calc.getMemory());
  }

  private void checkMemorySub(BigDecimal expected, BigDecimal memory, BigDecimal num) {
    calc.setMemory(memory);
    calc.memorySub(num);

    assertEquals(expected, calc.getMemory());
  }

  private void checkThrowBinary(BigDecimal left, BigDecimal right, String op) {
    try {
      calc.setLeftOperand(left);
      calc.setRightOperand(right);
      calc.setOperation(op);
      calc.getBinaryOperationResult();
      fail();
    } catch (ArithmeticException e) {
      // Nothing
    }
  }

  private void checkThrowUnary(BigDecimal big, String op) {
    try {
      calc.getUnaryOperationResult(op, big.toString());
      fail();
    } catch (ArithmeticException e) {
      // Haha, classic
    }
  }

  private void checkThrowPercent(BigDecimal left, BigDecimal right, String op) {
    try {
      calc.setLeftOperand(left);
      calc.setRightOperand(right);
      calc.setOperation(op);
      calc.getPercentOperation();
      fail();
    } catch (ArithmeticException e) {
      // Well shit, bro
    }
  }
}
